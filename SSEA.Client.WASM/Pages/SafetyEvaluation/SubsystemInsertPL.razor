@page "/safetyEvaluation/subsystemInsert/PL/{machineId:int}/{accessPointId:int}/{safetyFunctionId:int}/{subsystemId:int}"

@layout MainLayout

@inject NavigationManager navigationManager
@inject CodeListFacade codeListFacade

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 10px;">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Subsystem insert</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton @onclick="BackToSafetyFunction" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" />
                <MudIconButton @onclick="Edit" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" form="formId" Disabled="@onlyForReading" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs Outlined="true" Rounded="true" Centered="true" ApplyEffectsToContainer="true" Color="@Color.Default">

                <MudTabPanel Text="Safety function details">
                    <EditForm Model="@subsystem" OnValidSubmit="OnValidSubmit" id="formId">
                        <DataAnnotationsValidator />
                        <MudGrid Style="padding: 20px;">
                            @*<MudItem xs="12">
                                <MudTextField @bind-Value="safetyFunction.Name" ReadOnly="@onlyForReading" Label="Safety function name *" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect @bind-Value="safetyFunction.TypeOfFunction" ReadOnly="@onlyForReading" T="TypeOfFunctionModel" Label="Type of function *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@typeOfLogicToString">
                                    @foreach (var item in typeOfFunctions)
                                    {
                                        <MudSelectItem T="TypeOfFunctionModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="safetyFunction.Description" ReadOnly="@onlyForReading" T="string" Label="Safety function description" Variant="Variant.Outlined" Lines="3" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudField Label="Evaluation method" ReadOnly="true" Variant="Variant.Outlined">@safetyFunction.EvaluationMethod</MudField>
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField @bind-Value="safetyFunction.PLr" Label="Required PL" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField @bind-Value="safetyFunction.PLresult" Label="PL result" Variant="Variant.Outlined" />
                            </MudItem>*@
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>

                <MudTabPanel Text="Subsystems">
                    <MudGrid Style="padding: 20px;">

                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
            @if (showMessage)
            {
                <MudAlert Severity="@messageType" Style="margin-top: 20px;">@message</MudAlert>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    [Parameter]
    public int SubsystemId { get; set; }

    [Parameter]
    public int SafetyFunctionId { get; set; }

    [Parameter]
    public int AccessPointId { get; set; }

    [Parameter]
    public int MachineId { get; set; }

    private SubsystemDetailModelPL subsystem = new SubsystemDetailModelPL();

    private bool onlyForReading = true;
    private bool showMessage = false;
    private string message = string.Empty;
    private Severity messageType = Severity.Success;

    private readonly string successMessage = "Safety function was saved successfully :)";
    private readonly string errorMessage = "Saving failed :(";

    protected override async Task OnInitializedAsync()
    {
        StateHasChanged();
    }

    private async void Edit()
    {
        onlyForReading = false;
        showMessage = false;
    }

    private void BackToSafetyFunction()
    {
        navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionDetail/{MachineId}/{AccessPointId}/{SafetyFunctionId}");
    }

    // TODO
    private async void OnValidSubmit()
    {

    }

}
