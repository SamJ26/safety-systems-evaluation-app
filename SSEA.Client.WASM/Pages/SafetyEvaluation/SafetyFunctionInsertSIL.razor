@page "/safetyEvaluation/safetyFunctionInsert/SIL"

@layout MainLayout

@attribute [Authorize(Roles = "SafetyEvaluationAdmin, NormalUser")]

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 10px;">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6"><strong>Create new safety function (SIL)</strong></MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudTooltip Text="Back to access point">
                    <MudIconButton @onclick="@BackToAccessPoint" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Disabled="@(accessPointId == 0 || disabled)" />
                </MudTooltip>
                <MudTooltip Text="Save">
                    <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" form="formId" Disabled="@(disabled)" />
                </MudTooltip>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs Outlined="true" Rounded="true" Centered="true" ApplyEffectsToContainer="true" Color="@Color.Default">
                <MudTabPanel Text="Safety function details">
                    <EditForm Model="@safetyFunction" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="(() => showValidationSummary = true)" id="formId">
                        <DataAnnotationsValidator />
                        <MudGrid Style="padding: 20px;">
                            <MudItem xs="12">
                                <MudTextField @bind-Value="safetyFunction.Name" Label="Safety function name *" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudField Readonly="true" Label="Evaluation method" Variant="Variant.Outlined">Safety Integrity Level (SIL)</MudField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect @bind-Value="safetyFunction.TypeOfFunction" T="TypeOfFunctionModel" Label="Type of function *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@typeOfFunctionToString">
                                    @foreach (var item in typeOfFunctions)
                                    {
                                        <MudSelectItem T="TypeOfFunctionModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="safetyFunction.Description" T="string" Label="Safety function description" Variant="Variant.Outlined" Lines="3" />
                            </MudItem>
                            <MudItem xs="12" Style="padding-bottom: 0px;">
                                <MudText Typo="Typo.subtitle1" Style="margin-bottom: 5px;">Select required SIL or supply data for its evaluation (Se, Fr, Pr, Av)</MudText>
                                <hr />
                            </MudItem>
                            <MudItem xs="3">
                                <MudSelect @bind-Value="safetyFunction.Silcl" T="PFHdModel" Label="Required SIL" Variant="Variant.Outlined" Format="F2">
                                    @foreach (var item in sils)
                                    {
                                        <MudSelectItem T="PFHdModel" Value="@(item)">@item.ValueSIL</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="1" />
                            <MudItem xs="2">
                                <MudSelect @bind-Value="safetyFunction.Se" T="SeModel" Label="Se" Variant="Variant.Outlined" Format="F2">
                                    @foreach (var item in seModels)
                                    {
                                        <MudSelectItem T="SeModel" Value="@(item)">@item.Value</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="2">
                                <MudSelect @bind-Value="safetyFunction.Fr" T="FrModel" Label="Fr" Variant="Variant.Outlined" Format="F2">
                                    @foreach (var item in frModels)
                                    {
                                        <MudSelectItem T="FrModel" Value="@(item)">@item.Value</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="2">
                                <MudSelect @bind-Value="safetyFunction.Pr" T="PrModel" Label="Pr" Variant="Variant.Outlined" Format="F2">
                                    @foreach (var item in prModels)
                                    {
                                        <MudSelectItem T="PrModel" Value="@(item)">@item.Value</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="2">
                                <MudSelect @bind-Value="safetyFunction.Av" T="AvModel" Label="Av" Variant="Variant.Outlined" Format="F2">
                                    @foreach (var item in avModels)
                                    {
                                        <MudSelectItem T="AvModel" Value="@(item)">@item.Value</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            @if (showValidationSummary)
                            {
                                <MudItem xs="12">
                                    <MudAlert Severity="Severity.Error" Style="margin-top: 5px;" NoIcon="true">
                                        <ValidationSummary />
                                    </MudAlert>
                                </MudItem>
                            }
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>
                <MudTabPanel Text="Subsystems" Disabled="true" />
            </MudTabs>
            @if (showMessage)
            {
                <MudAlert Severity="@messageType" Style="margin-top: 20px;">@message</MudAlert>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    // accessPointId == 0
    // -- creating independed safety function
    // -- after saving navigate to SafetyFunctionDetailSIL
    // accessPointId != 0
    // -- creating safety function within access point
    // -- after saving navigate to AccessPointDetail
    // -- after saving create record in AccessPointSafetyFunction join table

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Inject]
    private SafetyFunctionFacade safetyFunctionFacade { get; set; }

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [Inject]
    private IDialogService dialogService { get; set; }

    private SafetyFunctionDetailModelSIL safetyFunction = new();

    private ICollection<TypeOfFunctionModel> typeOfFunctions = new List<TypeOfFunctionModel>();
    private ICollection<EvaluationMethodModel> evaluationMethods = new List<EvaluationMethodModel>();

    private ICollection<PFHdModel> sils = new List<PFHdModel>();
    private ICollection<SeModel> seModels = new List<SeModel>();
    private ICollection<FrModel> frModels = new List<FrModel>();
    private ICollection<PrModel> prModels = new List<PrModel>();
    private ICollection<AvModel> avModels = new List<AvModel>();

    private int machineId;
    private int accessPointId;

    private bool showValidationSummary = false;
    private bool disabled = false;
    private bool showMessage = false;
    private string message = string.Empty;
    private Severity messageType = Severity.Success;

    private Func<TypeOfFunctionModel, string> typeOfFunctionToString = tof => tof.Name;

    private readonly string successMessage = "Safety function was saved successfully :)";
    private readonly string errorMessage = "Saving failed :(";

    protected override async Task OnInitializedAsync()
    {
        evaluationMethods = await codeListFacade.GetAllEvaluationMethodsAsync();
        typeOfFunctions = await codeListFacade.GetAllTypeOfFunctionsAsync();
        sils = await codeListFacade.GetAllPFHdsAsync();
        seModels = await codeListFacade.GetAllSesAsync();
        frModels = await codeListFacade.GetAllFrsAsync();
        prModels = await codeListFacade.GetAllPrsAsync();
        avModels = await codeListFacade.GetAllAvsAsync();

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("machineId", out var _machineId))
            machineId = Convert.ToInt32(_machineId);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("accessPointId", out var _accessPointId))
            accessPointId = Convert.ToInt32(_accessPointId);

        safetyFunction.EvaluationMethod = evaluationMethods.FirstOrDefault(em => em.Shortcut == "SIL");
        safetyFunction.TypeOfFunction = null;
        StateHasChanged();
    }

    private async void OnValidSubmit()
    {
        showValidationSummary = false;
        if (IsModelValid())
        {
            disabled = true;
            int id = await safetyFunctionFacade.CreateAsync(safetyFunction, accessPointId);
            if (id != 0)
            {
                messageType = Severity.Success;
                message = successMessage;
                showMessage = true;
                StateHasChanged();
                await Task.Delay(2000);

                // Creating safety function from access point -> navigate to access point detail
                if (accessPointId != 0)
                    BackToAccessPoint();

                // Creating independent safety function -> navigate to safety function detail SIL
                else
                    navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionDetail/SIL/{0}/{0}/{id}");
            }
            else
            {
                messageType = Severity.Error;
                message = errorMessage;
                showMessage = true;
                disabled = false;
            }
        }
        else
        {
            showMessage = true;
            message = "Missing required SIL or Se, Fr, Pr, Av";
            messageType = Severity.Error;
        }
        StateHasChanged();
    }

    private bool IsModelValid()
    {
        if (safetyFunction.Silcl is null && (safetyFunction.Pr is null || safetyFunction.Av is null || safetyFunction.Fr is null || safetyFunction.Se is null))
            return false;
        return true;
    }

    private void BackToAccessPoint() => navigationManager.NavigateTo($"/safetyEvaluation/accessPointDetail/{machineId}/{accessPointId}");

}