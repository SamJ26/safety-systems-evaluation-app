@page "/safetyEvaluation/machineDetail/{id:int}"

@layout MainLayout

@inject IDialogService dialogService
@inject MachineFacade machineFacade
@inject CodeListFacade codeListFacade
@inject ILocalStorageService storageService
@inject NavigationManager navigationManager 

@attribute [Authorize]

@* TODO: 1. add data validation to all fields in form *@

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 10px;">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Detail of machine</MudText>
                <MudText Typo="Typo.body2">Created - user ID: @machineModel.IdCreated, time: @machineModel.DateTimeCreated</MudText>
                @if (machineModel.IdUpdated != null)
                {
                    <MudText Typo="Typo.body2">Updated - user ID: @machineModel.IdUpdated, time: @machineModel.DateTimeUpdated</MudText>
                }
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton @onclick="ClearAllFields" Icon="@Icons.Material.Filled.Clear" Color="Color.Primary" Disabled="@onlyForReading" />
                <MudIconButton @onclick="Edit" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" form="formId" Disabled="@onlyForReading" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs Outlined="true" Rounded="true" Centered="true" ApplyEffectsToContainer="true" Color="@Color.Default">

                <MudTabPanel Text="Machine details">
                    <EditForm Model="@machineModel" OnValidSubmit="OnValidSubmit" id="formId">
                        <DataAnnotationsValidator />
                        <MudGrid Style="padding: 20px;">
                            <MudItem xs="4">
                                <MudTextField @bind-Value="machineModel.Name" Label="Machine name *" ReadOnly="@onlyForReading" Variant="Variant.Outlined" For="@(() => machineModel.Name)"></MudTextField>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="machineModel.MachineType" ReadOnly="@onlyForReading" Text="@machineModel.MachineType.Name" T="MachineTypeModel" Label="Machine type *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@machineTypeToString">
                                    @foreach (var item in machineTypes)
                                    {
                                        <MudSelectItem T="MachineTypeModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4 ">
                                <MudField Label="Type of logic" ReadOnly="true" Variant="Variant.Outlined">@(machineModel.TypeOfLogic != null ? machineModel.TypeOfLogic.Name : "Not selected")</MudField>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="machineModel.EvaluationMethod" ReadOnly="@onlyForReading" T="EvaluationMethodModel" Label="Evaluation method *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@evalMethodToString">
                                    @foreach (var item in evaluationMethods)
                                    {
                                        <MudSelectItem T="EvaluationMethodModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="machineModel.Producer" ReadOnly="@onlyForReading" T="ProducerModel" Label="Producer *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@producerToString">
                                    @foreach (var item in producers)
                                    {
                                        <MudSelectItem T="ProducerModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="machineModel.Communication" ReadOnly="@onlyForReading" T="bool" Label="Communication *" Variant="Variant.Outlined" Format="F2">
                                    <MudSelectItem T="bool" Value="@(true)">Yes</MudSelectItem>
                                    <MudSelectItem T="bool" Value="@(false)">No</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="machineModel.Description" ReadOnly="@onlyForReading" T="string" Label="Machine description" Variant="Variant.Outlined" Lines="3" Style="margin-bottom: 25px;" />
                                <hr />
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machineModel.Hmi" ReadOnly="@onlyForReading">HMI</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machineModel.Plc" ReadOnly="@onlyForReading">PLC</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machineModel.MachineHelp" ReadOnly="@onlyForReading">Machine help</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machineModel.CodeProtection" ReadOnly="@onlyForReading">Code protection</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machineModel.SecurityOfSafetyParts" ReadOnly="@onlyForReading">Security of safety parts</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machineModel.SafetyMasterInPlace" ReadOnly="@onlyForReading">Safety master in place</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>

                <MudTabPanel Text="Access points">
                    <MudGrid Style="padding: 20px;">
                        <MudItem xs="2">
                            <MudButton @onclick="ClearAccessPoints" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Clear" Size="Size.Medium" DisableElevation="true" Style="width: 100%;" Disabled="@onlyForReading">Clear</MudButton>
                        </MudItem>
                        <MudItem xs="8" />
                        <MudItem xs="2">
                            <MudButton @onclick="OpenCreateAccessPointDialog" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" DisableElevation="true" Color="Color.Primary" Style="width: 100%;" Disabled="@onlyForReading">Add</MudButton>
                        </MudItem>
                        <MudItem xs="12" Style="padding-top: 0px;">
                            <MudTable T="AccessPointListModel" Items="@machineModel.AccessPoints"  OnRowClick="@(args => GoToAccessPointDetail(args))" Dense="true" Hover="true" Height="300px" FixedHeader="true" Outlined="true">
                                <ColGroup>
                                    <col style="width:35%;" />
                                    <col style="width:30%;" />
                                    <col style="width:20%;" />
                                    <col style="width:15%;" />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>State</MudTh>
                                    <MudTh>Safety functions</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="tableContext">
                                    <MudTd DataLabel="Name">@tableContext.Name</MudTd>
                                    <MudTd DataLabel="Name">@(tableContext.CurrentState != null ? tableContext.CurrentState.Name : "New - not saved")</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.SafetyFunctionsCount</MudTd>
                                    <MudTd DataLabel="Name">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Disabled="@onlyForReading"></MudIconButton>
                                        <MudIconButton Icon="@Icons.Material.Filled.ImageSearch"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Used norms">
                    <MudGrid Style="padding: 20px;">
                        <MudItem xs="2">
                            <MudButton @onclick="ClearNorms" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Clear" Size="Size.Medium" DisableElevation="true" Style="width: 100%;" Disabled="@onlyForReading">Clear</MudButton>
                        </MudItem>
                        <MudItem xs="8" />
                        <MudItem xs="2">
                            <MudButton @onclick="OpenSelectNormsDialog" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" DisableElevation="true" Color="Color.Primary" Style="width: 100%;" Disabled="@onlyForReading">Add</MudButton>
                        </MudItem>
                        <MudItem xs="12" Style="padding-top: 0px;">
                            <MudTable Items="@machineModel.MachineNorms" Dense="true" Hover="true" Height="300px" FixedHeader="true" Outlined="true">
                                <ColGroup>
                                    <col style="width:40%;" />
                                    <col style="width:20%;" />
                                    <col style="width:10%;" />
                                    <col style="width:15%;" />
                                    <col style="width:15%;" />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Label</MudTh>
                                    <MudTh>Category</MudTh>
                                    <MudTh>Up to date</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="tableContext">
                                    <MudTd DataLabel="Name">@tableContext.Norm.Name</MudTd>
                                    <MudTd DataLabel="Label">@tableContext.Norm.Label</MudTd>
                                    <MudTd DataLabel="Category">@tableContext.Norm.NormCategory</MudTd>
                                    <MudTd DataLabel="Up to date">@tableContext.Norm.IsValid</MudTd>
                                    <MudTd DataLabel="Name">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
            @if (showMessage)
            {
                <MudAlert Severity="@messageType" Style="margin-top: 20px;">@message</MudAlert>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    [Parameter]
    public int Id { get; set; }

    private MachineDetailModel machineModel = new MachineDetailModel();

    private bool onlyForReading = true;
    private bool showMessage = false;
    private string message = string.Empty;
    private Severity messageType = Severity.Success;

    private readonly string successMessage = "Your machine was saved successfully :)";
    private readonly string errorMessage = "Saving your machine failed :(";

    private ICollection<EvaluationMethodModel> evaluationMethods = new List<EvaluationMethodModel>();
    private ICollection<MachineTypeModel> machineTypes = new List<MachineTypeModel>();
    private ICollection<ProducerModel> producers = new List<ProducerModel>();
    private ICollection<NormModel> norms = new List<NormModel>();

    private Func<MachineTypeModel, string> machineTypeToString = machineType => machineType?.Name;
    private Func<EvaluationMethodModel, string> evalMethodToString = evalMethod => evalMethod?.Shortcut;
    private Func<ProducerModel, string> producerToString = producer => producer?.Name;

    protected override async Task OnInitializedAsync()
    {
        machineModel = await machineFacade.GetByIdAsync(Id);
    }

    private async void OpenCreateAccessPointDialog()
    {
        AccessPointListModel accessPointModel = new();
        var parameters = new DialogParameters() { ["AccessPoint"] = accessPointModel };
        var dialog = dialogService.Show<CreateAccessPointDialog>("Create access point", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            machineModel.AccessPoints.Add(accessPointModel);
        }
        StateHasChanged();
    }

    private async void OpenSelectNormsDialog()
    {
        norms = await codeListFacade.GetAllNormsAsync();
        ICollection<MachineNormModel> selectedNorms = new List<MachineNormModel>();
        var parameters = new DialogParameters() { ["Norms"] = norms, ["MachineId"] = machineModel.Id, ["SelectedNorms"] = selectedNorms };
        var dialog = dialogService.Show<SelectNormsDialog>("Select norms", parameters, new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            foreach (var item in selectedNorms)
            {
                machineModel.MachineNorms.Add(item);
            }
        }
        StateHasChanged();
    }

    // TODO: complete logic
    private async void OnValidSubmit()
    {
        onlyForReading = true;
        var result = await machineFacade.CreateAsync(machineModel);
        if (result != 0)
        {
            Console.WriteLine("Successfull create");
            messageType = Severity.Success;
            message = successMessage;
            // TODO: fix bug
            // machineModel = await machineFacade.GetByIdAsync(result);
            Console.WriteLine(result);
        }
        else
        {
            Console.WriteLine("Error create");
            messageType = Severity.Error;
            message = errorMessage;
        }
        showMessage = true;
        StateHasChanged();
    }

    // TODO: add logic for update after saving
    private async void Edit()
    {
        evaluationMethods = await codeListFacade.GetAllEvaluationMethodsAsync();
        machineTypes = await codeListFacade.GetAllMachineTypesAsync();
        producers = await codeListFacade.GetAllProducersAsync();
        onlyForReading = false;
        showMessage = false;
        StateHasChanged();
    }

    // TODO: add logic
    private void ClearAllFields()
    {

    }

    // TODO: add logic for removnig already saved items from DB
    private void ClearAccessPoints()
    {
        machineModel.AccessPoints.Clear();
        StateHasChanged();
    }

    // TODO: add logic for removnig already saved items from DB
    private void ClearNorms()
    {
        machineModel.MachineNorms.Clear();
        StateHasChanged();
    }

    // TODO: test functionality
    private void GoToAccessPointDetail(TableRowClickEventArgs<AccessPointListModel> args)
    {
        navigationManager.NavigateTo($"/safetyEvaluation/accessPointDetail/{machineModel.Id}/{args.Item.Id}");
    }
}
