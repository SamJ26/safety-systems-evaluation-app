
@inject CodeListFacade codeListFacade
@inject SafetyFunctionFacade safetyFunctionFacade 
@inject AccessPointFacade accessPointFacade

<MudDialog Style="width: 700px;">
    <TitleContent>
        <MudText Align="Align.Center" Typo="Typo.h5">Create new safety function</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            @if (EvaluationMethod.Equals("PL"))
            {
                <MudItem xs="12">
                    <MudTextField @bind-Value="safetyFunctionPL.Name" Label="Name *" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudSelect @bind-Value="safetyFunctionPL.TypeOfFunction" T="TypeOfFunctionModel" Label="Type of function *" Variant="Variant.Outlined" Format="F2">
                        @foreach (var item in typeOfFunctions)
                        {
                            <MudSelectItem T="TypeOfFunctionModel" Value="@(item)">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="safetyFunctionPL.Description" Label="Description" Variant="Variant.Outlined" Lines="3"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <hr />
                </MudItem>
                <MudItem xs="6">
                    <MudField Label="Evaluation method" ReadOnly="true" Variant="Variant.Outlined">@EvaluationMethod</MudField>
                </MudItem>
                <MudItem xs="6">
                    <MudSelect @bind-Value="safetyFunctionPL.PLr" T="PLModel" Label="Required PL" Variant="Variant.Outlined" Format="F2">
                        @foreach (var item in PLs)
                        {
                            <MudSelectItem T="PLModel" Value="@(item)">@item.Label</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect @bind-Value="safetyFunctionPL.S" T="SModel" Label="Severity of injury" Variant="Variant.Outlined" Format="F2">
                        @foreach (var item in Ss)
                        {
                            <MudSelectItem T="SModel" Value="@(item)">@item.Value</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect @bind-Value="safetyFunctionPL.F" T="FModel" Label="Frequency" Variant="Variant.Outlined" Format="F2">
                        @foreach (var item in Fs)
                        {
                            <MudSelectItem T="FModel" Value="@(item)">@item.Value</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect @bind-Value="safetyFunctionPL.P" T="PModel" Label="Probability" Variant="Variant.Outlined" Format="F2">
                        @foreach (var item in Ps)
                        {
                            <MudSelectItem T="PModel" Value="@(item)">@item.Value</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            else
            {
                // TODO: add gui layout for SIL methodics
            }
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" OnClick="Cancel" Style="width:100%; margin-bottom: 10px;">Cancel</MudButton>
            </MudItem>
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Style="width:100%; margin-bottom: 10px;">Save</MudButton>
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string EvaluationMethod { get; set; } = string.Empty;

    [Parameter]
    public int AccessPointId { get; set; }

    private SafetyFunctionDetailModelPL safetyFunctionPL { get; set; } = new();
    private SafetyFunctionDetailModelSIL safetyFunctionSIL { get; set; } = new();

    private ICollection<TypeOfFunctionModel> typeOfFunctions { get; set; } = new List<TypeOfFunctionModel>();

    private ICollection<SModel> Ss { get; set; } = new List<SModel>();
    private ICollection<FModel> Fs { get; set; } = new List<FModel>();
    private ICollection<PModel> Ps { get; set; } = new List<PModel>();
    private ICollection<PLModel> PLs { get; set; } = new List<PLModel>();

    private ICollection<SeModel> Ses { get; set; } = new List<SeModel>();
    private ICollection<FrModel> Frs { get; set; } = new List<FrModel>();
    private ICollection<PrModel> Prs { get; set; } = new List<PrModel>();
    private ICollection<AvModel> Avs { get; set; } = new List<AvModel>();

    protected override async Task OnInitializedAsync()
    {
        typeOfFunctions = await codeListFacade.GetAllTypeOfFunctionsAsync();

        if (EvaluationMethod.Equals("PL"))
        {
            Ss = await codeListFacade.GetAllSsAsync();
            Fs = await codeListFacade.GetAllFsAsync();
            Ps = await codeListFacade.GetAllPsAsync();
            PLs = await codeListFacade.GetAllPLsAsync();
        }
        else
        {
            Ses = await codeListFacade.GetAllSesAsync();
            Frs = await codeListFacade.GetAllFrsAsync();
            Prs = await codeListFacade.GetAllPrsAsync();
            Avs = await codeListFacade.GetAllAvsAsync();
        }
    }

    private async void Submit()
    {
        if (EvaluationMethod.Equals("PL"))
        {
            var result = await safetyFunctionFacade.CreateAsync(safetyFunctionPL);
        }
        else
        {
            var result = await safetyFunctionFacade.CreateAsync(safetyFunctionSIL);
        }
        // TODO: create record in join table
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();

}