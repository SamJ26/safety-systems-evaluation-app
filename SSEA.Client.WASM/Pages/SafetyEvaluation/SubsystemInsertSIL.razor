@page "/safetyEvaluation/subsystemInsert/SIL"

@layout MainLayout

@attribute [Authorize(Roles = "SafetyEvaluationAdmin, NormalUser")]

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 10px; margin-bottom: 40px;">
    <MudCard Elevation="0" Outlined="true">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5"><strong>Create new subsystem (SIL)</strong></MudText>
                <MudText Typo="Typo.subtitle1">Fields marked with * are required</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudTooltip Text="Back to safety function">
                    <MudIconButton @onclick="@BackToSafetyFunction" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Disabled="@(safetyFunctionId == 0 || disabled)" />
                </MudTooltip>
                <MudTooltip Text="Save">
                    <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" form="formId" Disabled="@(disabled || tabs.ActivePanelIndex != 0)" />
                </MudTooltip>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs @ref="tabs" ActivePanelIndexChanged="@PanelIndexChanged" Outlined="true" Rounded="true" Centered="true" ApplyEffectsToContainer="true" Color="@Color.Default">

                <MudTabPanel Text="Subsystem details">
                    <EditForm Model="@subsystem" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="@(() => showValidationSummary = true)" id="formId">
                        <DataAnnotationsValidator />
                        <MudGrid Style="padding: 20px;">
                            <MudItem xs="12">
                                <MudSelect @bind-Value="subsystem.TypeOfSubsystem" T="TypeOfSubsystemModel" ReadOnly="@typeSelected" Label="Type of subsystem *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@typeOfSubsystemToString">
                                    @foreach (var item in typeOfSubsystems)
                                    {
                                        <MudSelectItem T="TypeOfSubsystemModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect @bind-Value="subsystem.OperationPrinciple" T="OperationPrincipleModel" Label="Operation principle *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@operationPrincipleToString">
                                    @foreach (var item in operationPrinciples)
                                    {
                                        <MudSelectItem T="OperationPrincipleModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTooltip Text="Control test interval">
                                    <MudTextField T="double" @bind-Value="subsystem.T1" Label="T1 *" Variant="Variant.Outlined" />
                                </MudTooltip>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTooltip Text="Diagnostic test interval" >
                                    <MudTextField T="double" @bind-Value="subsystem.T2" Label="T2 *" Variant="Variant.Outlined" />
                                </MudTooltip>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect @bind-Value="subsystem.Architecture" T="ArchitectureModel" Label="Architecture *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@architectureToString">
                                    @foreach (var item in architectures)
                                    {
                                        <MudSelectItem T="ArchitectureModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="subsystem.Description" T="string" Label="Subsystem description" Variant="Variant.Outlined" Lines="3" />
                            </MudItem>
                            @if (showValidationSummary)
                            {
                                <MudItem xs="12">
                                    <MudAlert Severity="Severity.Error" Style="margin-top: 5px;" NoIcon="true">
                                        <ValidationSummary />
                                    </MudAlert>
                                </MudItem>
                            }
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>

                <MudTabPanel Text="CCF" Disabled="@(subsystem.Architecture?.Label == string.Empty || subsystem.Architecture?.Label is null)">
                    <MudGrid Style="padding: 20px;">
                        <MudItem xs="12">
                            <MudTable T="CCFModel" MultiSelection="true" @bind-SelectedItems="@subsystem.SelectedCCFs" Items="@CCFs" Dense="true" Hover="true" Outlined="true">
                                <ColGroup>
                                    <col style="width:5%;" /> Checkbox
                                    <col style="width:15%;" /> Type
                                    <col style="width:75%;" /> Description
                                    <col style="width:5%;" /> Points
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Type</MudTh>
                                    <MudTh>Description</MudTh>
                                    <MudTh>Points</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="tableContext">
                                    <MudTd DataLabel="Name">@tableContext.Type</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.Description</MudTd>
                                    <MudTd DataLabel="Name" Style="padding-left: 27px;">@tableContext.Points</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Elements" Disabled="@(subsystem.Architecture?.Label == string.Empty || subsystem.Architecture?.Label is null)">
                    <MudGrid Style="padding: 20px;">
                        @if (subsystem.Architecture?.Channels == 1)
                        {
                            <MudItem xs="3" />
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6" Align="Align.Center">1. Element</MudText>
                                <ElementSIL Model="@element1" Producers="@producers" DCs="@DCs" ReadOnly="false" />
                            </MudItem>
                            <MudItem xs="3" />
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudText Align="Align.Center">
                                    <MudCheckBox @bind-Checked="equalElements" Color="Color.Primary" Style="padding: 0px;">Both elements are the same</MudCheckBox>
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6" Align="Align.Center">1. Element</MudText>
                                <ElementSIL Model="@element1" Producers="@producers" DCs="@DCs" ReadOnly="false" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6" Align="Align.Center">2. Element</MudText>
                                <ElementSIL Model="@(equalElements == true ? element1 : element2)" Producers="@producers" DCs="@DCs" ReadOnly="false" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
            @if (showMessage)
            {
                <MudAlert Severity="@messageType" Style="margin-top: 20px;">@message</MudAlert>
            }
        </MudCardContent>
    </MudCard>
    <div style="margin: 5px; text-align: right; font-size: 11px;">
        Form ID: SUBSYSTEM SIL INSERT
    </div>
</MudContainer>

@code {

    // safetyFunctionId == 0
    // -- creating independed subsystem
    // -- after saving navigate to SubsystemDetailSIL
    // safetyFunctionId != 0
    // -- creating subsystem within safety function
    // -- after saving navigate to SafetyFunctionDetailSIL
    // -- after saving create record in SafetyFunctionSubsystem join table

    [Inject]
    private SubsystemFacade subsystemFacade { get; set; }

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    private Func<ArchitectureModel, string> architectureToString = a => a.Label;
    private Func<OperationPrincipleModel, string> operationPrincipleToString = op => op.Name;
    private Func<TypeOfSubsystemModel, string> typeOfSubsystemToString = tos => tos.Name;

    private SubsystemDetailModelSIL subsystem = new();

    private ElementDetailModelSIL element1 = new();
    private ElementDetailModelSIL element2 = new();

    private ICollection<DCModel> DCs = new List<DCModel>();
    private ICollection<CCFModel> CCFs = new List<CCFModel>();
    private ICollection<ProducerModel> producers = new List<ProducerModel>();
    private ICollection<ArchitectureModel> architectures = new List<ArchitectureModel>();
    private ICollection<TypeOfSubsystemModel> typeOfSubsystems = new List<TypeOfSubsystemModel>();
    private ICollection<OperationPrincipleModel> operationPrinciples = new List<OperationPrincipleModel>();

    private int machineId;
    private int accessPointId;
    private int safetyFunctionId;

    private bool showValidationSummary = false;
    private bool equalElements = true;
    private bool disabled = false;
    private bool typeSelected = false;
    private bool showMessage = false;
    private string message = string.Empty;
    private Severity messageType = Severity.Success;
    private MudTabs tabs = new MudTabs();

    protected override async Task OnInitializedAsync()
    {
        DCs = await codeListFacade.GetAllDCsAsync();
        CCFs = await codeListFacade.GetAllCCFsAsync();
        producers = await codeListFacade.GetAllProducersAsync();
        architectures = await codeListFacade.GetAllArchitecturesAsync();
        typeOfSubsystems = await codeListFacade.GetAllTypeOfSubsystemsAsync();
        operationPrinciples = await codeListFacade.GetAllOperationPrinciplesAsync();

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("typeOfSubsystem", out var _typeOfSubsystem))
        {
            subsystem.TypeOfSubsystem = (_typeOfSubsystem.ToString().ToLower()) switch
            {
                "input" => typeOfSubsystems.FirstOrDefault(t => t.Id == 1),
                "output" => typeOfSubsystems.FirstOrDefault(t => t.Id == 2),
                "input-logic" => typeOfSubsystems.FirstOrDefault(t => t.Id == 4),
                "output-logic" => typeOfSubsystems.FirstOrDefault(t => t.Id == 5),
                _ => typeOfSubsystems.FirstOrDefault(t => t.Id == 3),
            };
            typeSelected = true;
        }
        else
            subsystem.TypeOfSubsystem = null;
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("machineId", out var _machineId))
            machineId = Convert.ToInt32(_machineId);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("accessPointId", out var _accessPointId))
            accessPointId = Convert.ToInt32(_accessPointId);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("safetyFunctionId", out var _safetyFunctionId))
            safetyFunctionId = Convert.ToInt32(_safetyFunctionId);

        subsystem.OperationPrinciple = null;
        subsystem.Architecture = null;

        StateHasChanged();
    }

    private void BackToSafetyFunction()
    {
        navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionDetail/SIL/{machineId}/{accessPointId}/{safetyFunctionId}");
    }

    private void PanelIndexChanged()
    {
        showValidationSummary = false;
        StateHasChanged();
    }

    private async Task OnValidSubmit()
    {
        disabled = true;
        showValidationSummary = false;

        subsystem.Elements = new List<ElementDetailModelSIL>();
        subsystem.Elements.Add(element1);
        if (subsystem.Architecture.Channels == 2 && equalElements)
            subsystem.Elements.Add(element1);
        if (subsystem.Architecture.Channels == 2 && equalElements == false)
            subsystem.Elements.Add(element2);

        if (ValidateElements() == true)
        {
            SubsystemCreationResponseModel response;
            response = await subsystemFacade.CreateAsync(subsystem, safetyFunctionId);
            if (response.IsSuccess)
            {
                messageType = Severity.Success;
                message = response.Message;
                showMessage = true;
                StateHasChanged();
                await Task.Delay(2000);

                // Creating subsystem within safety function -> navigate to safety function detail
                if (safetyFunctionId != 0)
                    BackToSafetyFunction();

                // Creating independed subsystem -> navigate to subsystem detail
                else
                    navigationManager.NavigateTo($"/safetyEvaluation/subsystemDetail/SIL/{0}/{0}/{0}/{response.SubsystemId}");
            }
            else
                message = response.Message;
        }
        messageType = Severity.Error;
        showMessage = true;
        disabled = false;
        StateHasChanged();

    }

    private bool ValidateElements()
    {
        try
        {
            if (subsystem.Elements is null || subsystem.Elements.Count == 0)
                throw new Exception("Subsystem has 0 elements");
            foreach (var element in subsystem.Elements)
            {
                if (string.IsNullOrEmpty(element.CatalogNumber) || string.IsNullOrWhiteSpace(element.CatalogNumber))
                    throw new Exception("Validation error in the elements section - missing catalog number");
                if (element.DC is null)
                    throw new Exception("Validation error in the elements section - missing DC");
                if (element.Producer is null)
                    throw new Exception("Validation error in the elements section - missing producer");
                if (element.B10d == 0 || element.B10d < 0)
                    throw new Exception("Invalid value for B10d field");
                if (element.C == 0 || element.C < 0)
                    throw new Exception("Invalid value for C field");
                if (element.SummedSFF > 100)
                    throw new Exception("SFF can't be bigger than 100");
                if (subsystem.Architecture.Label.Equals("B") && (subsystem.T1 == 0 || subsystem.T1 < 0))
                    throw new Exception("T1 field is required for architecture B");
                if (subsystem.Architecture.Label.Equals("D") && (subsystem.T1 == 0 || subsystem.T1 < 0 || subsystem.T2 == 0 || subsystem.T2 < 0))
                    throw new Exception("T1 and T2 fields are required for architecture D");
            }
        }
        catch (Exception e)
        {
            message = e.Message;
            return false;
        }
        return true;
    }

}