
<MudDialog>
    <TitleContent>
        <MudText Align="Align.Center" Typo="Typo.h5">Select safety functions</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" Style="padding: 0px 12px;"><hr /></MudItem>
            <MudItem xs="1" Style="padding-bottom: 14px; padding-top: 18px;">
                <MudButton @onclick="Search" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Size="Size.Large" Style="width: 100%; height: 100%;"></MudButton>
            </MudItem>
            <MudItem xs="4">
                <MudTextField @bind-Value="name" Label="Safety function name" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="4">
                <MudSelect @bind-Value="typeOfFunctionId" T="int" Label="Type of function" Strict="true" Variant="Variant.Outlined" Format="F2">
                    <MudSelectItem T="int" Value="0">All</MudSelectItem>
                    @foreach (var item in typeOfFunctions)
                    {
                        <MudSelectItem T="int" Value="@(item.Id)">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                <MudField Label="Evaluation method" ReadOnly="true" Variant="Variant.Outlined">@EvaluationMethod</MudField>
            </MudItem>
            <MudItem xs="12" Style="padding-top: 7px;"><hr /></MudItem>
            <MudItem xs="12">
                <MudTable Items="@safetyFunctions" MultiSelection="true" @bind-SelectedItems="selectedSafetyFunctions" Height="400px" Hover="true" Elevation="0" Outlined="true" FixedHeader="true">
                    <ColGroup>
                        <col style="width:5%;" />
                        <col style="width:20%;" /> Name
                        <col style="width:25%;" /> State
                        <col style="width:30%;" /> Type of function
                        <col style="width:20%;" /> Evaluation method
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>State</MudTh>
                        <MudTh>Type of function</MudTh>
                        <MudTh>Evaluation method</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="State">@context.CurrentState.Name</MudTd>
                        <MudTd DataLabel="Evaluation method">@context.TypeOfFunction.Name</MudTd>
                        <MudTd DataLabel="Type of function">@context.EvaluationMethod.Name</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" OnClick="Cancel" Style="width:100%; margin-bottom: 10px;">Cancel</MudButton>
            </MudItem>
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Style="width:100%; margin-bottom: 10px;">Save</MudButton>
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {

    [Inject]
    private SafetyFunctionFacade safetyFunctionFacade { get; set; }

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string EvaluationMethod { get; set; }

    private ICollection<SafetyFunctionListModel> safetyFunctions = new List<SafetyFunctionListModel>();
    private ICollection<TypeOfFunctionModel> typeOfFunctions = new List<TypeOfFunctionModel>();

    private HashSet<SafetyFunctionListModel> selectedSafetyFunctions { get; set; }

    private string name;
    private int typeOfFunctionId;
    private int evaluationMethodId;

    protected override async Task OnInitializedAsync()
    {
        typeOfFunctions = await codeListFacade.GetAllTypeOfFunctionsAsync();
        Search();
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(selectedSafetyFunctions));
    private void Cancel() => MudDialog.Cancel();

    private async void Search()
    {
        evaluationMethodId = EvaluationMethod.Equals("PL") ? 1 : 2;
        safetyFunctions = await safetyFunctionFacade.GetAllAsync(name, 14, typeOfFunctionId, evaluationMethodId);
        StateHasChanged();
    }

}
