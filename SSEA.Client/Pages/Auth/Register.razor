@page "/auth/register"

@layout AuthLayout

@inject NavigationManager navigationManager
@inject IClientService clientService
@inject ILocalStorageService storageService

<div class="card" style=" margin: auto; width: 550px; margin-top: 50px;">
    <div class="card-body">
        <div class="container">
            <div class="row">
                <div class="col">
                    <div class="text-center">
                        <h2>Register to app</h2>
                    </div>
                    <hr />
                    <EditForm Model="@model" OnValidSubmit="@LoginUser">

                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label for="firstname">First name</label>
                            <InputText Id="firstname" class="form-control" @bind-Value="model.FirstName" />
                            <ValidationMessage For="@(() => model.FirstName)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="lastname">Last name</label>
                            <InputText Id="lastname" class="form-control" @bind-Value="model.LastName" />
                            <ValidationMessage For="@(() => model.LastName)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="email">Email</label>
                            <InputText Id="email" type="email" class="form-control" @bind-Value="model.Email" />
                            <ValidationMessage For="@(() => model.Email)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="password">Password</label>
                            <InputText Id="password" type="password" class="form-control" @bind-Value="model.Password" />
                            <ValidationMessage For="@(() => model.Password)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label for="confirmpassword">Confirm password</label>
                            <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="model.ConfirmPassword" />
                            <ValidationMessage For="@(() => model.ConfirmPassword)"></ValidationMessage>
                        </div>

                        @if (showMessage)
                        {
                            <hr />
                            <div class="text-center alert @messageClass">@message</div>
                        }

                        <hr />
                        <button type="submit" class="btn btn-primary btn-block" disabled="@isBusy">
                            Register
                        </button>
                        <button type="button" class="btn btn-primary btn-block" @onclick="GoToLogin" disabled="@isBusy">
                            Login
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private RegisterUserModel model = new RegisterUserModel();

    private bool isBusy = false;
    private bool showMessage = false;
    private string message = string.Empty;
    private string messageClass = string.Empty;

    async void LoginUser()
    {
        isBusy = true;
        AuthResponseModel response = await clientService.RegisterAsync(model);
        if (response.IsSuccess)
        {
            messageClass = "alert-info";
            message = response.Message;
        }
        else
        {
            messageClass = "alert-danger";
            message = response.Errors != null ? response.Errors.FirstOrDefault() : response.Message;
        }
        showMessage = true;
        isBusy = false;

        Console.WriteLine("Breakpoint!");
        StateHasChanged();
    }

    void GoToLogin()
    {
        navigationManager.NavigateTo("/auth/login");
    }

}
