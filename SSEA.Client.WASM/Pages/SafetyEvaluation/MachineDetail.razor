@page "/safetyEvaluation/machineDetail/{id:int}"

@layout MainLayout

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 10px;">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Detail of machine</MudText>
                <MudText Typo="Typo.body2">Created - user ID: @machine.IdCreated, time: @machine.DateTimeCreated</MudText>
                @if (machine.IdUpdated != null)
                {
                    <MudText Typo="Typo.body2">Updated - user ID: @machine.IdUpdated, time: @machine.DateTimeUpdated</MudText>
                }
            </CardHeaderContent>
            <CardHeaderActions>
                <AuthorizeView Roles="SafetyEvaluationAdmin, NormalUser">
                    <Authorized>
                        <MudIconButton @onclick="@Edit" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Disabled="@(!onlyForReading || disabled)" />
                        <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" form="formId" Disabled="@(onlyForReading || tabs.ActivePanelIndex != 0)" />
                        <MudIconButton @onclick="@Delete" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Disabled="@disabled" />
                        <MudButton @onclick="@SelectLogic" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Search" Color="Color.Primary" Style="margin: 0px 5px 0px 10px;" Disabled="@disabled">Select logic</MudButton>
                        <MudButton @onclick="@EvaluateSafety" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Security" Color="Color.Primary" Style="margin: 0px 10px 0px 5px;" Disabled="@disabled">Evaluate safety</MudButton>
                    </Authorized>
                </AuthorizeView>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs @ref="tabs" ActivePanelIndexChanged="@(() => StateHasChanged())" Outlined="true" Rounded="true" Centered="true" ApplyEffectsToContainer="true" Color="@Color.Default">

                <MudTabPanel Text="Machine details">
                    <EditForm Model="@machine" OnValidSubmit="OnValidSubmit" id="formId">
                        <DataAnnotationsValidator />
                        <MudGrid Style="padding: 20px;">
                            <MudItem xs="4">
                                <MudTextField @bind-Value="machine.Name" Label="Machine name *" ReadOnly="@onlyForReading" Variant="Variant.Outlined" For="@(() => machine.Name)"></MudTextField>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="machine.MachineType" ReadOnly="@onlyForReading" Text="@machine.MachineType.Name" T="MachineTypeModel" Label="Machine type *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@machineTypeToString">
                                    @foreach (var item in machineTypes)
                                    {
                                        <MudSelectItem T="MachineTypeModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4 ">
                                <MudField Label="Type of logic" ReadOnly="true" Variant="Variant.Outlined">@(machine.TypeOfLogic != null ? machine.TypeOfLogic.Name : "Not selected")</MudField>
                            </MudItem>
                            <MudItem xs="4">
                                <MudField Label="Evaluation method" ReadOnly="true" Variant="Variant.Outlined">@(machine.EvaluationMethod.Name)</MudField>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="machine.Producer" ReadOnly="@onlyForReading" T="ProducerModel" Label="Producer *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@producerToString">
                                    @foreach (var item in producers)
                                    {
                                        <MudSelectItem T="ProducerModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudField Label="Safety communication" ReadOnly="true" Variant="Variant.Outlined">@((machine.Communication == true) ? "Yes" : "No")</MudField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="machine.Description" ReadOnly="@onlyForReading" T="string" Label="Machine description" Variant="Variant.Outlined" Lines="3" Style="margin-bottom: 25px;" />
                                <hr />
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machine.Hmi" ReadOnly="@onlyForReading">HMI</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machine.Plc" ReadOnly="@onlyForReading">PLC</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machine.MachineHelp" ReadOnly="@onlyForReading">Machine help</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machine.CodeProtection" ReadOnly="@onlyForReading">Code protection</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machine.SecurityOfSafetyParts" ReadOnly="@onlyForReading">Security of safety parts</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="4">
                                <MudPaper Outlined="true">
                                    <MudCheckBox @bind-Checked="machine.SafetyMasterInPlace" ReadOnly="@onlyForReading">Safety master in place</MudCheckBox>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>

                <MudTabPanel Text="Access points">
                    <MudGrid Style="padding: 20px;">
                        <MudItem xs="10" />
                        <MudItem xs="2">
                            <MudButton @onclick="OpenCreateAccessPointDialog" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" DisableElevation="true" Color="Color.Primary" Style="width: 100%;" Disabled="@onlyForReading">Add</MudButton>
                        </MudItem>
                        <MudItem xs="12" Style="padding-top: 0px;">
                            <MudTable T="AccessPointListModel" Items="@machine.AccessPoints" OnRowClick="@(args => GoToAccessPointDetail(args))" Dense="true" Hover="true" Height="400px" FixedHeader="true" Outlined="true">
                                <ColGroup>
                                    <col style="width:40%;" />Name
                                    <col style="width:35%;" />State
                                    <col style="width:20%;" />Safety functions
                                    <col style="width:5%;" />Actions
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>State</MudTh>
                                    <MudTh>Safety functions</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="tableContext">
                                    <MudTd DataLabel="Name">@tableContext.Name</MudTd>
                                    <MudTd DataLabel="Name">@(tableContext.CurrentState != null ? tableContext.CurrentState.Name : "New - not saved")</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.SafetyFunctionsCount</MudTd>
                                    <MudTd DataLabel="Name">
                                        <MudIconButton @onclick="@(() => machine.AccessPoints.Remove(tableContext))" Icon="@Icons.Material.Filled.Delete" Disabled="@onlyForReading"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Used norms">
                    <MudGrid Style="padding: 20px;">
                        <MudItem xs="10" />
                        <MudItem xs="2">
                            <MudButton @onclick="OpenSelectNormsDialog" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" DisableElevation="true" Color="Color.Primary" Style="width: 100%;" Disabled="@onlyForReading">Add</MudButton>
                        </MudItem>
                        <MudItem xs="12" Style="padding-top: 0px;">
                            <MudTable Items="@machine.Norms" Dense="true" Hover="true" Height="400px" FixedHeader="true" Outlined="true">
                                <ColGroup>
                                    <col style="width:50%;" />Name
                                    <col style="width:25%;" />Label
                                    <col style="width:10%;" />Category
                                    <col style="width:10%;" />Up to date
                                    <col style="width:5%;" />Actions
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Label</MudTh>
                                    <MudTh>Category</MudTh>
                                    <MudTh>Up to date</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="tableContext">
                                    <MudTd DataLabel="Name">@tableContext.Name</MudTd>
                                    <MudTd DataLabel="Label">@tableContext.Label</MudTd>
                                    <MudTd DataLabel="Category">@tableContext.NormCategory</MudTd>
                                    <MudTd DataLabel="Up to date">@tableContext.IsValid</MudTd>
                                    <MudTd DataLabel="Name">
                                        <MudIconButton @onclick="@(() => machine.Norms.Remove(tableContext))" Icon="@Icons.Material.Filled.Delete" Disabled="@onlyForReading"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
            @if (showMessage)
            {
                <MudAlert Severity="@messageType" Style="margin-top: 20px;">@message</MudAlert>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    [Inject]
    private IDialogService dialogService { get; set; }

    [Inject]
    private MachineFacade machineFacade { get; set; }

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Parameter]
    public int Id { get; set; }

    private MachineDetailModel machine = new MachineDetailModel();

    private bool disabled = false;
    private bool onlyForReading = true;
    private bool showMessage = false;
    private string message = string.Empty;
    private Severity messageType = Severity.Success;
    private MudTabs tabs = new MudTabs();

    private readonly string successMessage = "Your machine was saved successfully :)";
    private readonly string errorMessage = "Saving of your machine failed :(";

    private ICollection<MachineTypeModel> machineTypes = new List<MachineTypeModel>();
    private ICollection<ProducerModel> producers = new List<ProducerModel>();

    private Func<MachineTypeModel, string> machineTypeToString = machineType => machineType?.Name;
    private Func<EvaluationMethodModel, string> evalMethodToString = evalMethod => evalMethod?.Shortcut;
    private Func<ProducerModel, string> producerToString = producer => producer?.Name;

    protected override async Task OnInitializedAsync()
    {
        machine = await machineFacade.GetByIdAsync(Id);
    }

    private async void OpenCreateAccessPointDialog()
    {
        AccessPointListModel accessPointModel = new();
        var parameters = new DialogParameters() { ["AccessPoint"] = accessPointModel };
        var dialog = dialogService.Show<CreateAccessPointDialog>("Create access point", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            machine.AccessPoints.Add(accessPointModel);
        }
        StateHasChanged();
    }

    private async void OpenSelectNormsDialog()
    {
        HashSet<NormModel> selectedNorms = new HashSet<NormModel>();
        var parameters = new DialogParameters() { ["SelectedNorms"] = selectedNorms };
        var dialog = dialogService.Show<SelectNormsDialog>("Select norms", parameters, new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            foreach (var norm in selectedNorms)
                machine.Norms.Add(norm);
        }
        StateHasChanged();
    }

    private async void OnValidSubmit()
    {
        disabled = true;
        onlyForReading = true;
        var result = await machineFacade.UpdateAsync(machine);
        if (result != 0)
        {
            messageType = Severity.Success;
            message = successMessage;
            machine = await machineFacade.GetByIdAsync(machine.Id);
        }
        else
        {
            messageType = Severity.Error;
            message = errorMessage;
        }
        showMessage = true;
        disabled = false;
        StateHasChanged();
    }

    private async void Edit()
    {
        machineTypes = await codeListFacade.GetAllMachineTypesAsync();
        producers = await codeListFacade.GetAllProducersAsync();
        onlyForReading = false;
        showMessage = false;
        StateHasChanged();
    }

    private async Task Delete()
    {
        var parameters = new DialogParameters() { ["ItemToDelte"] = "machine", ["NameOfItem"] = machine.Name };
        var dialog = dialogService.Show<ApproveDeleteDialog>("Delete", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await machineFacade.DeleteAsync(machine.Id);
            navigationManager.NavigateTo("/safetyEvaluation/machineList");
        }
    }

    private void GoToAccessPointDetail(TableRowClickEventArgs<AccessPointListModel> args)
    {
        navigationManager.NavigateTo($"/safetyEvaluation/accessPointDetail/{machine.Id}/{args.Item.Id}");
    }

    private async Task SelectLogic()
    {
        disabled = true;
        onlyForReading = true;
        var response = await machineFacade.SelectLogicAsync(machine.Id);
        if (response.IsSuccess)
        {
            messageType = Severity.Success;
            machine.TypeOfLogic = response.Logic;
        }
        else
        {
            messageType = Severity.Error;
        }
        message = response.Message;
        showMessage = true;
        disabled = false;
        StateHasChanged();
    }

    private async Task EvaluateSafety()
    {
        disabled = true;
        onlyForReading = true;
        var response = await machineFacade.EvaluateSafetyAsync(machine.Id);
        if (response.IsSuccess)
        {
            messageType = Severity.Success;
        }
        else
        {
            messageType = Severity.Error;
        }
        message = response.Message;
        showMessage = true;
        disabled = false;
        StateHasChanged();
    }

}
