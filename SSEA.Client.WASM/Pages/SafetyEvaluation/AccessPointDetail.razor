@page "/safetyEvaluation/accessPointDetail/{machineId:int}/{accessPointId:int}"

@layout MainLayout

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 10px; margin-bottom: 40px;">
    <MudCard Elevation="0" Outlined="true">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5"><strong>Detail of access point</strong></MudText>
                <MudText Typo="Typo.h5" Style="margin-bottom: 5px;"><small>State number: @accessPoint.CurrentState?.StateNumber [ @accessPoint.CurrentState?.Name ]</small></MudText>
                <MudText Typo="Typo.body2">Created - user: @accessPoint.UserNameCreated, time: @accessPoint.DateTimeCreated</MudText>
                @if (accessPoint.IdUpdated != null)
                {
                    <MudText Typo="Typo.body2">Updated - user: @accessPoint.UserNameUpdated, time: @accessPoint.DateTimeUpdated</MudText>
                }
            </CardHeaderContent>
            <CardHeaderActions>
                <MudTooltip Text="Back to machine">
                    <MudIconButton @onclick="BackToMachine" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" />
                </MudTooltip>
                <AuthorizeView Roles="SafetyEvaluationAdmin, NormalUser">
                    <Authorized>
                        @if (Convert.ToInt32(context.User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value) == accessPoint.IdCreated || context.User.IsInRole("SafetyEvaluationAdmin"))
                        {
                            <MudTooltip Text="Edit data">
                                <MudIconButton @onclick="Edit" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Disabled="@(!onlyForReading || disabled)" />
                            </MudTooltip>
                            <MudTooltip Text="Save">
                                <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" form="formId" Disabled="@(onlyForReading || tabs.ActivePanelIndex != 0)" />
                            </MudTooltip>
                            <MudTooltip Text="Delete">
                                <MudIconButton @onclick="@Delete" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Disabled="@disabled" />
                            </MudTooltip>
                        }
                    </Authorized>
                </AuthorizeView>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs @ref="tabs" ActivePanelIndexChanged="@PanelIndexChanged" Outlined="true" Rounded="true" Centered="true" ApplyEffectsToContainer="true" Color="@Color.Default">

                <MudTabPanel Text="Access point details">
                    <EditForm Model="@accessPoint" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="@(() => showValidationSummary = true)" id="formId">
                        <DataAnnotationsValidator />
                        <MudGrid Style="padding: 20px;">
                            <MudItem xs="10">
                                <MudTextField @bind-Value="accessPoint.Name" ReadOnly="@onlyForReading" Label="Access point name *" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="2">
                                <MudTextField @bind-Value="accessPoint.Id" Label="Identifier (ID)" Variant="Variant.Outlined" ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="accessPoint.MachineName" Label="Machine name" Variant="Variant.Outlined" ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="accessPoint.EvaluationMethod" Label="Evaluation method" Variant="Variant.Outlined" ReadOnly="true" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="accessPoint.Description" ReadOnly="@onlyForReading" T="string" Label="Access point description" Variant="Variant.Outlined" Lines="3" />
                            </MudItem>
                            @if (showValidationSummary)
                            {
                                <MudItem xs="12">
                                    <MudAlert Severity="Severity.Error" Style="margin-top: 5px;" NoIcon="true">
                                        <ValidationSummary />
                                    </MudAlert>
                                </MudItem>
                            }
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>

                <MudTabPanel Text="Safety functions">
                    <MudGrid Style="padding: 20px;">
                        <AuthorizeView Roles="SafetyEvaluationAdmin, NormalUser">
                            <Authorized>
                                @if (Convert.ToInt32(context.User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value) == accessPoint.IdCreated || context.User.IsInRole("SafetyEvaluationAdmin"))
                                {
                                    <MudItem xs="8" />
                                    <MudItem xs="2">
                                        <MudButton @onclick="OpenSelectSafetyFunctionsDialog" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" DisableElevation="true" Color="Color.Primary" Style="width: 100%;">Add existing</MudButton>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudButton @onclick="CreateSafetyFunction" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create" Size="Size.Medium" DisableElevation="true" Color="Color.Primary" Style="width: 100%;">Create new</MudButton>
                                    </MudItem>
                                }
                            </Authorized>
                        </AuthorizeView>
                        <MudItem xs="12" Style="padding-top: 0px;">
                            <MudTable T="SafetyFunctionListModel" Items="@accessPoint.SafetyFunctions" OnRowClick="@(args => GoToSafetyFunctionDetail(args))" Dense="true" Hover="true" Height="300px" FixedHeader="true" Outlined="true">
                                <ColGroup>
                                    <col style="width:20%;" /> Name
                                    <col style="width:25%;" /> State
                                    <col style="width:25%;" /> Type of function
                                    <col style="width:20%;" /> Evaluation method
                                    <col style="width:10%;" /> Actions
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>State</MudTh>
                                    <MudTh>Type of function</MudTh>
                                    <MudTh>Evaluation method</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="tableContext">
                                    <MudTd DataLabel="Name">@tableContext.Name</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.CurrentState.Name</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.TypeOfFunction.Name</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.EvaluationMethod.Shortcut</MudTd>
                                    <MudTd DataLabel="Name">
                                        <MudIconButton @onclick="() => OpenRemoveSafetyFunctionDialog(tableContext)" Icon="@Icons.Material.Filled.Delete" Disabled="@onlyForReading"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
            @if (showMessage)
            {
                <MudAlert Severity="@messageType" Style="margin-top: 20px;">@message</MudAlert>
            }
        </MudCardContent>
    </MudCard>
    <div style="margin: 5px; text-align: right; font-size: 11px;">
        Form ID: ACCESS POINT DETAIL
    </div>
</MudContainer>

<MudDialog @bind-IsVisible="showDialog">
    <DialogContent>
        <MudText Typo="Typo.h5">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            Remove safety function ?
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => showDialog = false)">Cancel</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="RemoveSafetyFunction">Delete</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Inject]
    private IDialogService dialogService { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Inject]
    private AccessPointFacade accessPointFacade { get; set; }

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [Parameter]
    public int AccessPointId { get; set; }

    [Parameter]
    public int MachineId { get; set; }

    private AccessPointDetailModel accessPoint = new AccessPointDetailModel();

    private bool showValidationSummary = false;
    private bool showDialog = false;
    private bool disabled = false;
    private bool onlyForReading = true;
    private bool showMessage = false;
    private string message = string.Empty;
    private Severity messageType = Severity.Success;
    private MudTabs tabs = new MudTabs();

    private int removedSafetyFunctionId = 0;

    private readonly string successMessage = "Access point was saved successfully :)";
    private readonly string errorMessage = "Saving failed :(";

    protected override async Task OnInitializedAsync()
    {
        accessPoint = await accessPointFacade.GetByIdAsync(AccessPointId);
        StateHasChanged();
    }

    private void BackToMachine() => navigationManager.NavigateTo($"/safetyEvaluation/machineDetail/{MachineId}");

    private void GoToSafetyFunctionDetail(TableRowClickEventArgs<SafetyFunctionListModel> args)
    {
        navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionDetail/{accessPoint.EvaluationMethod}/{MachineId}/{AccessPointId}/{args.Item.Id}");
    }

    private async Task Delete()
    {
        var parameters = new DialogParameters() { ["ItemToDelte"] = "access point", ["NameOfItem"] = accessPoint.Name };
        var dialog = dialogService.Show<ApproveDeleteDialog>("Delete", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await accessPointFacade.DeleteAsync(accessPoint.Id);
            BackToMachine();
        }
    }

    private void OpenRemoveSafetyFunctionDialog(SafetyFunctionListModel safetyFunction)
    {
        showMessage = false;
        removedSafetyFunctionId = safetyFunction.Id;
        showDialog = true;
    }

    private async Task RemoveSafetyFunction()
    {
        showDialog = false;
        if (removedSafetyFunctionId != 0)
        {
            await accessPointFacade.RemoveSafetyFunctionAsync(AccessPointId, removedSafetyFunctionId);
            removedSafetyFunctionId = 0;
            accessPoint = await accessPointFacade.GetByIdAsync(AccessPointId);
        }
        StateHasChanged();
    }

    private void Edit()
    {
        onlyForReading = false;
        showMessage = false;
    }

    private async void OpenSelectSafetyFunctionsDialog()
    {
        var parameters = new DialogParameters() { ["EvaluationMethod"] = accessPoint.EvaluationMethod };
        var dialog = dialogService.Show<SelectSafetyFunctionsDialog>("Select safety functions", parameters, new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var safetyFunctions = (HashSet<SafetyFunctionListModel>)result.Data;
            foreach (var safetyFunction in safetyFunctions)
            {
                await accessPointFacade.AddSafetyFunctionAsync(AccessPointId, safetyFunction.Id);
            }
            accessPoint = await accessPointFacade.GetByIdAsync(accessPoint.Id);
        }
        StateHasChanged();
    }

    private void CreateSafetyFunction() => navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionInsert/{accessPoint.EvaluationMethod}?machineId={MachineId}&accessPointId={AccessPointId}");

    private async void OnValidSubmit()
    {
        showValidationSummary = false;
        disabled = true;
        onlyForReading = true;
        var result = await accessPointFacade.UpdateAsync(accessPoint);
        if (result != 0)
        {
            messageType = Severity.Success;
            message = successMessage;
            accessPoint = await accessPointFacade.GetByIdAsync(result);
        }
        else
        {
            messageType = Severity.Error;
            message = errorMessage;
        }
        showMessage = true;
        disabled = false;
        StateHasChanged();
    }

    private void PanelIndexChanged()
    {
        showValidationSummary = false;
        StateHasChanged();
    }
}
