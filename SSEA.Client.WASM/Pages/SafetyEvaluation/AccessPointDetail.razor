@page "/safetyEvaluation/accessPointDetail/{machineId:int}/{accessPointId:int}"

@layout MainLayout

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 10px;">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Detail of access point</MudText>
                <MudText Typo="Typo.body2">Created - user ID: @accessPoint.IdCreated, time: @accessPoint.DateTimeCreated</MudText>
                @if (accessPoint.IdUpdated != null)
                {
                    <MudText Typo="Typo.body2">Updated - user ID: @accessPoint.IdUpdated, time: @accessPoint.DateTimeUpdated</MudText>
                }
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton @onclick="BackToMachine" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" />
                <MudIconButton @onclick="Edit" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Disabled="@(!onlyForReading || disabled)" />
                <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" form="formId" Disabled="@(onlyForReading || tabs.ActivePanelIndex != 0)" />
                <MudIconButton @onclick="@Delete" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Disabled="@disabled" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs @ref="tabs" ActivePanelIndexChanged="@(() => StateHasChanged())" Outlined="true" Rounded="true" Centered="true" ApplyEffectsToContainer="true" Color="@Color.Default">

                <MudTabPanel Text="Access point details">
                    <EditForm Model="@accessPoint" OnValidSubmit="OnValidSubmit" id="formId">
                        <DataAnnotationsValidator />
                        <MudGrid Style="padding: 20px;">
                            <MudItem xs="4">
                                <MudTextField @bind-Value="accessPoint.Name" ReadOnly="@onlyForReading" Label="Access point name *" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField @bind-Value="accessPoint.MachineName" Label="Machine name" Variant="Variant.Outlined" ReadOnly="true"/>
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField @bind-Value="accessPoint.EvaluationMethod" Label="Evaluation method" Variant="Variant.Outlined" ReadOnly="true"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="accessPoint.Description" ReadOnly="@onlyForReading" T="string" Label="Access point description" Variant="Variant.Outlined" Lines="3" />
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>

                <MudTabPanel Text="Safety functions">
                    <MudGrid Style="padding: 20px;">
                        <MudItem xs="8" />
                        <MudItem xs="2">
                            <MudButton @onclick="OpenSelectSafetyFunctionsDialog" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" DisableElevation="true" Color="Color.Primary" Style="width: 100%;" Disabled="@onlyForReading">Add existing</MudButton>
                        </MudItem>
                        <MudItem xs="2">
                            <MudButton @onclick="OpenCreateSafetyFunctionDialog" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create" Size="Size.Medium" DisableElevation="true" Color="Color.Primary" Style="width: 100%;" Disabled="@onlyForReading">Create new</MudButton>
                        </MudItem>
                        <MudItem xs="12" Style="padding-top: 0px;">
                            <MudTable T="SafetyFunctionListModel" Items="@accessPoint.SafetyFunctions" OnRowClick="@(args => GoToSafetyFunctionDetail(args))" Dense="true" Hover="true" Height="300px" FixedHeader="true" Outlined="true">
                                <ColGroup>
                                    <col style="width:20%;" /> Name
                                    <col style="width:25%;" /> State
                                    <col style="width:25%;" /> Type of function
                                    <col style="width:20%;" /> Evaluation method
                                    <col style="width:10%;" /> Actions
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>State</MudTh>
                                    <MudTh>Type of function</MudTh>
                                    <MudTh>Evaluation method</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="tableContext">
                                    <MudTd DataLabel="Name">@tableContext.Name</MudTd>
                                    <MudTd DataLabel="Name">@(tableContext.CurrentState != null ? tableContext.CurrentState.Name : "New - not saved")</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.TypeOfFunction.Name</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.EvaluationMethod.Shortcut</MudTd>
                                    <MudTd DataLabel="Name">
                                        <MudIconButton @onclick="() => RemoveSafetyFunction(tableContext)" Icon="@Icons.Material.Filled.Delete" Disabled="@onlyForReading"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
            @if (showMessage)
            {
                <MudAlert Severity="@messageType" Style="margin-top: 20px;">@message</MudAlert>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    [Inject]
    private IDialogService dialogService { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Inject]
    private AccessPointFacade accessPointFacade { get; set; }

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [Parameter]
    public int AccessPointId { get; set; }

    [Parameter]
    public int MachineId { get; set; }

    private AccessPointDetailModel accessPoint = new AccessPointDetailModel();

    private bool disabled = false;
    private bool onlyForReading = true;
    private bool showMessage = false;
    private string message = string.Empty;
    private Severity messageType = Severity.Success;
    private MudTabs tabs = new MudTabs();

    private readonly string successMessage = "Access point was saved successfully :)";
    private readonly string errorMessage = "Saving failed :(";

    protected override async Task OnInitializedAsync()
    {
        accessPoint = await accessPointFacade.GetByIdAsync(AccessPointId);
        StateHasChanged();
    }

    private void BackToMachine()
    {
        navigationManager.NavigateTo($"/safetyEvaluation/machineDetail/{MachineId}");
    }

    private void GoToSafetyFunctionDetail(TableRowClickEventArgs<SafetyFunctionListModel> args)
    {
        navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionDetail/{accessPoint.EvaluationMethod}/{MachineId}/{AccessPointId}/{args.Item.Id}");
    }

    private async Task Delete()
    {
        var parameters = new DialogParameters() { ["ItemToDelte"] = "access point", ["NameOfItem"] = accessPoint.Name };
        var dialog = dialogService.Show<ApproveDeleteDialog>("Delete", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await accessPointFacade.DeleteAsync(accessPoint.Id);
            BackToMachine();
        }
    }

    private void RemoveSafetyFunction(SafetyFunctionListModel safetyFunction)
    {
        accessPoint.SafetyFunctions.Remove(safetyFunction);
        StateHasChanged();
    }

    private void Edit()
    {
        if (accessPoint.SafetyFunctions is null)
            accessPoint.SafetyFunctions = new List<SafetyFunctionListModel>();
        onlyForReading = false;
        showMessage = false;
    }

    private async void OpenSelectSafetyFunctionsDialog()
    {
        ICollection<SafetyFunctionListModel> selectedSafetyFunctions = new HashSet<SafetyFunctionListModel>();
        var parameters = new DialogParameters() { ["EvaluationMethod"] = accessPoint.EvaluationMethod, ["SelectedSafetyFunctions"] = selectedSafetyFunctions };
        var dialog = dialogService.Show<SelectSafetyFunctionsDialog>("Select safety functions", parameters, new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            foreach (var item in selectedSafetyFunctions)
                accessPoint.SafetyFunctions.Add(item);
        }
        StateHasChanged();
    }

    private async void OpenCreateSafetyFunctionDialog()
    {
        var safetyFunction = new SafetyFunctionListModel();
        var parameters = new DialogParameters() { ["EvaluationMethod"] = accessPoint.EvaluationMethod, ["SafetyFunction"] = safetyFunction };
        var dialog = dialogService.Show<CreateSafetyFunctionDialog>("Create safety function", parameters, new DialogOptions() { MaxWidth = MaxWidth.Large });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            accessPoint.SafetyFunctions.Add(safetyFunction);
        }
        StateHasChanged();
    }

    private async void OnValidSubmit()
    {
        disabled = true;
        onlyForReading = true;
        var result = await accessPointFacade.UpdateAsync(accessPoint);
        if (result != 0)
        {
            messageType = Severity.Success;
            message = successMessage;
            accessPoint = await accessPointFacade.GetByIdAsync(result);
        }
        else
        {
            messageType = Severity.Error;
            message = errorMessage;
        }
        showMessage = true;
        disabled = false;
        StateHasChanged();
    }

}
