
<MudDialog Style="width: 500px;">
    <TitleContent>
        <MudText Align="Align.Center" Typo="Typo.h5">Create new safety function</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="SafetyFunction.Name" Label="Name *" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudField Label="Evaluation method" Variant="Variant.Outlined" ReadOnly="true">@EvaluationMethod</MudField>
            </MudItem>
            <MudItem xs="12">
                <MudSelect @bind-Value="SafetyFunction.TypeOfFunction" T="TypeOfFunctionModel" Label="Type of function *" Variant="Variant.Outlined" Format="F2">
                    @foreach (var item in typeOfFunctions)
                    {
                        <MudSelectItem T="TypeOfFunctionModel" Value="@(item)">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" OnClick="Cancel" Style="width:100%; margin-bottom: 10px;">Cancel</MudButton>
            </MudItem>
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Style="width:100%; margin-bottom: 10px;">Save</MudButton>
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string EvaluationMethod { get; set; }

    [Parameter]
    public SafetyFunctionListModel SafetyFunction { get; set; }

    private ICollection<TypeOfFunctionModel> typeOfFunctions = new List<TypeOfFunctionModel>();
    private ICollection<EvaluationMethodModel> evaluationMethods = new List<EvaluationMethodModel>();

    protected override async Task OnInitializedAsync()
    {
        typeOfFunctions = await codeListFacade.GetAllTypeOfFunctionsAsync();
        evaluationMethods = await codeListFacade.GetAllEvaluationMethodsAsync();
        SafetyFunction.EvaluationMethod = evaluationMethods.FirstOrDefault(em => em.Shortcut == EvaluationMethod);
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

}