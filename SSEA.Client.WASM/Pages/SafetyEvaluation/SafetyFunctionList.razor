@page "/safetyEvaluation/safetyFunctionList"

@layout MainLayout

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="padding-top: 10px;">
    <MudCard Elevation="0">
        <MudCardHeader Style="padding-bottom: 0px;">
            <CardHeaderContent>
                <MudText Typo="Typo.h5"><strong>Safety function list</strong></MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <AuthorizeView Roles="SafetyEvaluationAdmin, NormalUser">
                    <Authorized>
                        <MudButton @onclick="@(() => CreateNew("SIL"))" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Create" Color="Color.Primary" Style="margin-top:5px; margin-right:8px;">New (SIL)</MudButton>
                        <MudButton @onclick="@(() => CreateNew("PL"))" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Create" Color="Color.Primary" Style="margin-top:5px; margin-right:8px;">New (PL)</MudButton>
                    </Authorized>
                </AuthorizeView>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <hr />
            <MudGrid Style="margin-top: 0px;">
                <MudItem xs="1" Style="padding-bottom: 14px; padding-top: 18px;">
                    <MudButton @onclick="Search" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Size="Size.Large" Style="width: 100%; height: 100%;">Search</MudButton>
                </MudItem>
                <MudItem xs="11">
                    <MudGrid>
                        <MudItem xs="3">
                            <MudTextField @bind-Value="safetyFunctionName" Label="Safety function name" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="3">
                            <MudSelect @bind-Value="stateId" T="int" Label="State of record" Strict="true" Variant="Variant.Outlined" Format="F2">
                                <MudSelectItem T="int" Value="@(0)">All</MudSelectItem>
                                <MudSelectItem T="int" Value="@(10)">Nová</MudSelectItem>
                                <MudSelectItem T="int" Value="@(11)">Rozpracovaná</MudSelectItem>
                                <MudSelectItem T="int" Value="@(12)">Připravená na vyhodnocení</MudSelectItem>
                                <MudSelectItem T="int" Value="@(13)">Vyhodnocená - validní</MudSelectItem>
                                <MudSelectItem T="int" Value="@(14)">Vyhodnocená - invalidní</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4">
                            <MudSelect @bind-Value="typeOfFunctionId" T="int" Label="Type of function" Strict="true" Variant="Variant.Outlined" Format="F2">
                                <MudSelectItem T="int" Value="@(0)">All</MudSelectItem>
                                @foreach (var item in typeOfFunctions)
                                {
                                    <MudSelectItem T="int" Value="@(item.Id)">@item.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="2">
                            <MudSelect @bind-Value="evaluationMethodId" T="int" Label="Evaluation method" Strict="true" Variant="Variant.Outlined" Format="F2">
                                <MudSelectItem T="int" Value="@(0)">All</MudSelectItem>
                                @foreach (var item in evaluationMethods)
                                {
                                    <MudSelectItem T="int" Value="@(item.Id)">@item.Shortcut</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
            <hr style="margin-top:16px;" />
            @if (searching == true)
            {
                <MudText Align="Align.Center" Style="margin: 50px;">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                </MudText>
            }
            else
            {
                <MudTable T="SafetyFunctionListModel" OnRowClick="@(args => GoToSafetyFunctionDetail(args))" Items="@safetyFunctions" Hover="true" Outlined="true" Style="margin-top: 20px;" Dense="false">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>State</MudTh>
                        <MudTh>Type of function</MudTh>
                        <MudTh>Evaluation method</MudTh>
                    </HeaderContent>
                    <ColGroup>
                        <col style="width:30%;" />Name
                        <col style="width:15%;" />State
                        <col style="width:35%;" />Type of function
                        <col style="width:10%;" />Evaluation method
                    </ColGroup>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="State">@context.CurrentState.Name</MudTd>
                        <MudTd DataLabel="Type of function">@context.TypeOfFunction.Name</MudTd>
                        <MudTd DataLabel="Evaluation method">@context.EvaluationMethod.Shortcut</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{10, 15}" />
                    </PagerContent>
                </MudTable>
            }
            @if (notFound)
            {
                <MudText Align="Align.Center" Style="margin: 50px;" Typo="Typo.h6">
                    Found nothing :(
                </MudText>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    [Inject]
    private SafetyFunctionFacade safetyFunctionFacade { get; set; }

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Inject]
    private IDialogService dialogService { get; set; }

    private ICollection<SafetyFunctionListModel> safetyFunctions = new List<SafetyFunctionListModel>();

    private string safetyFunctionName = string.Empty;
    private int stateId;
    private int evaluationMethodId;
    private int typeOfFunctionId;
    private bool searching = false;
    private bool notFound = false;

    private ICollection<EvaluationMethodModel> evaluationMethods = new List<EvaluationMethodModel>();
    private ICollection<TypeOfFunctionModel> typeOfFunctions = new List<TypeOfFunctionModel>();

    protected override async Task OnInitializedAsync()
    {
        evaluationMethods = await codeListFacade.GetAllEvaluationMethodsAsync();
        typeOfFunctions = await codeListFacade.GetAllTypeOfFunctionsAsync();
    }

    private void CreateNew(string methodics)
    {
        navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionInsert/{methodics}");
    }

    private async void Search()
    {
        searching = true;
        safetyFunctions = await safetyFunctionFacade.GetAllAsync(safetyFunctionName, stateId, typeOfFunctionId, evaluationMethodId);
        notFound = safetyFunctions is null || safetyFunctions.Count == 0;
        searching = false;
        StateHasChanged();
    }

    private void GoToSafetyFunctionDetail(TableRowClickEventArgs<SafetyFunctionListModel> args)
    {
        navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionDetail/{args.Item.EvaluationMethod.Shortcut}/{0}/{0}/{args.Item.Id}");
    }

}
