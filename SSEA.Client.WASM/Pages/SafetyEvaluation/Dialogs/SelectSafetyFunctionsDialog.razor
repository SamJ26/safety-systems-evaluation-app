
@inject SafetyFunctionFacade safetyFunctionFacade
@inject AccessPointFacade accessPointFacade 
@inject CodeListFacade codeListFacade

<MudDialog>
    <TitleContent>
        <MudText Align="Align.Center" Typo="Typo.h5">Select safety functions</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="1" Style="padding-bottom: 14px; padding-top: 18px;">
                <MudButton @onclick="Search" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Size="Size.Large" Style="width: 100%; height: 100%;"></MudButton>
            </MudItem>
            <MudItem xs="11">
                <MudGrid>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="name" Label="Safety function name" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect @bind-Value="typeOfFunction" T="TypeOfFunctionModel" Label="Type of function" Variant="Variant.Outlined" Format="F2">
                            @foreach (var item in typeOfFunctions)
                            {
                                <MudSelectItem T="TypeOfFunctionModel" Value="@(item)">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudField Label="Evaluation method" ReadOnly="true" Variant="Variant.Outlined">@EvaluationMethod</MudField>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12">
                <hr />
            </MudItem>
            <MudItem xs="12">
                <MudTable Items="@safetyFunctions" MultiSelection="true" @bind-SelectedItems="selectedItems" Height="400px" Hover="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>State</MudTh>
                        <MudTh>Type of function</MudTh>
                        <MudTh>Evaluation method</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                            <MudTd DataLabel="Label">@context.CurrentState.Name</MudTd>
                            <MudTd DataLabel="Category">@context.EvaluationMethod.Name</MudTd>
                            <MudTd DataLabel="Up to date">@context.TypeOfFunction.Name</MudTd>
                        </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" OnClick="Cancel" Style="width:100%; margin-bottom: 10px;">Cancel</MudButton>
            </MudItem>
            <MudItem xs="6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Style="width:100%; margin-bottom: 10px;">Save</MudButton>
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string EvaluationMethod { get; set; } = string.Empty;

    [Parameter]
    public int AccessPointId { get; set; }

    private HashSet<SafetyFunctionListModel> selectedItems = new HashSet<SafetyFunctionListModel>();

    private ICollection<SafetyFunctionListModel> safetyFunctions = new List<SafetyFunctionListModel>();
    private ICollection<TypeOfFunctionModel> typeOfFunctions { get; set; } = new List<TypeOfFunctionModel>();

    private string name = string.Empty;
    private TypeOfFunctionModel typeOfFunction;

    protected override async Task OnInitializedAsync()
    {
        typeOfFunctions = await codeListFacade.GetAllTypeOfFunctionsAsync();
    }

    // TODO
    void Submit()
    {
        Console.WriteLine(selectedItems.Count);
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();

    // TODO: add logic for searching
    private async void Search()
    {
        safetyFunctions = await safetyFunctionFacade.GetAllAsync();
        StateHasChanged();
    }
}
