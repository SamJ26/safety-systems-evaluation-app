// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SSEA.DAL;

namespace SSEA.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("SY_Role");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SY_RoleClaim");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrentState_Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentState_Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("SY_User");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SY_UserClaim");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("SY_UserLogin");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SY_UserRole");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("SY_UserToken");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.CCF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("ForPL")
                        .HasColumnType("bit");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeCZ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeEN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CCF");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Fyzické oddělení medzi jednotlivými dráhami signálu",
                            ForPL = true,
                            IdCreated = 0,
                            IsValid = true,
                            Points = 15L,
                            TypeCZ = "Oddělení/segregace"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Jsou použity ruzné technologie/konstrukce nebo fyzikální principy",
                            ForPL = true,
                            IdCreated = 0,
                            IsValid = true,
                            Points = 20L,
                            TypeCZ = "Diverzita"
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Ochrana proti přepětí, přetlaku, nadproudu, atd.",
                            ForPL = true,
                            IdCreated = 0,
                            IsValid = true,
                            Points = 15L,
                            TypeCZ = "Konstrukce/použití/zkušenosti"
                        },
                        new
                        {
                            Id = 4,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Jsou použity osvědčené součásti",
                            ForPL = true,
                            IdCreated = 0,
                            IsValid = true,
                            Points = 5L,
                            TypeCZ = "Konstrukce/použití/zkušenosti"
                        },
                        new
                        {
                            Id = 5,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Jsou k vyloučení poruch se společnou pŕíčinou v konstrukci uvažovány výsledky režimu poruchy a nalýza účinku?",
                            ForPL = true,
                            IdCreated = 0,
                            IsValid = true,
                            Points = 5L,
                            TypeCZ = "Posouzení/analýza"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.DC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<short>("Max")
                        .HasColumnType("smallint");

                    b.Property<short>("Min")
                        .HasColumnType("smallint");

                    b.Property<string>("ValueCZ")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ValueEN")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("DC");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Max = (short)60,
                            Min = (short)0,
                            ValueCZ = "Žádné"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Max = (short)90,
                            Min = (short)60,
                            ValueCZ = "Nízké"
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Max = (short)99,
                            Min = (short)90,
                            ValueCZ = "Střední"
                        },
                        new
                        {
                            Id = 4,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Max = (short)100,
                            Min = (short)99,
                            ValueCZ = "Vysoké"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.EvaluationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("NameCZ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Shortcut")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("EvaluationMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Úroveň vlastností",
                            NameEN = "Performance Level",
                            Shortcut = "PL"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Úroveň integrity bezpečnosti",
                            NameEN = "Safety Integrity Level",
                            Shortcut = "SIL"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.MachineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("NameCZ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MachineType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Nějaký popis",
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Jednoúčelový stroj"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Nějaký popis",
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Víceúčelový stroj"
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Nějaký popis",
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Montážní linka"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.Norm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CatalogNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NameCZ")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormCategory")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Norm");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CatalogNumber = "15296296",
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Label = "ČSN EN ISO 13849-1",
                            NameCZ = "Bezpečnost strojních zařízení - Bezpečnostné části ovládacích systému - Část 1: Všeobecné zásady pro konstrukci",
                            NormCategory = "B1"
                        },
                        new
                        {
                            Id = 2,
                            CatalogNumber = "15296296",
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Label = "ČSN EN ISO 12100",
                            NameCZ = "Popis tejto normy",
                            NormCategory = "A"
                        },
                        new
                        {
                            Id = 3,
                            CatalogNumber = "15296296",
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Label = "ČSN EN 62061",
                            NameCZ = "Popis tejto normy",
                            NormCategory = "B1"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CountryOfOrigin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Producer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryOfOrigin = "Germany",
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Name = "Siemens"
                        },
                        new
                        {
                            Id = 2,
                            CountryOfOrigin = "Slovakia",
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Name = "Sipron"
                        },
                        new
                        {
                            Id = 3,
                            CountryOfOrigin = "USA",
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Name = "Allen Bradley"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.TypeOfFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("NameCZ")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfFunction");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Funkce bezpečného zastavení iniciována bezpečnostním zařízením"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Funkce ručního opětného nastavení"
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Funkce místního ovládaní"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.TypeOfLogic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AccessPointsMaxCount")
                        .HasColumnType("int");

                    b.Property<bool>("Communication")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("EthernetAdressesMaxCount")
                        .HasColumnType("bigint");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<int>("MaxArchitectureId")
                        .HasColumnType("int")
                        .HasColumnName("MaxArchitecture_Id");

                    b.Property<int>("MaxCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("MaxCategory_Id");

                    b.Property<int>("MaxPLId")
                        .HasColumnType("int")
                        .HasColumnName("MaxPL_Id");

                    b.Property<int>("MaxSILId")
                        .HasColumnType("int")
                        .HasColumnName("MaxSIL_Id");

                    b.Property<string>("NameCZ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SI")
                        .HasColumnType("int");

                    b.Property<int>("SO")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaxArchitectureId");

                    b.HasIndex("MaxCategoryId");

                    b.HasIndex("MaxPLId");

                    b.HasIndex("MaxSILId");

                    b.ToTable("TypeOfLogic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessPointsMaxCount = 2,
                            Communication = false,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EthernetAdressesMaxCount = 0L,
                            IdCreated = 0,
                            IsValid = true,
                            MaxArchitectureId = 4,
                            MaxCategoryId = 5,
                            MaxPLId = 5,
                            MaxSILId = 1,
                            NameCZ = "Relé",
                            NameEN = "Relay",
                            SI = 4,
                            SO = 4
                        },
                        new
                        {
                            Id = 2,
                            AccessPointsMaxCount = 5,
                            Communication = false,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EthernetAdressesMaxCount = 0L,
                            IdCreated = 0,
                            IsValid = true,
                            MaxArchitectureId = 4,
                            MaxCategoryId = 5,
                            MaxPLId = 5,
                            MaxSILId = 1,
                            NameCZ = "CR30",
                            NameEN = "CR30",
                            SI = 12,
                            SO = 10
                        },
                        new
                        {
                            Id = 3,
                            Communication = true,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EthernetAdressesMaxCount = 48L,
                            IdCreated = 0,
                            IsValid = true,
                            MaxArchitectureId = 4,
                            MaxCategoryId = 5,
                            MaxPLId = 5,
                            MaxSILId = 1,
                            NameCZ = "GMX",
                            NameEN = "GMX",
                            SI = 6144,
                            SO = 6144
                        },
                        new
                        {
                            Id = 4,
                            Communication = true,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EthernetAdressesMaxCount = 256L,
                            IdCreated = 0,
                            IsValid = true,
                            MaxArchitectureId = 4,
                            MaxCategoryId = 5,
                            MaxPLId = 5,
                            MaxSILId = 1,
                            NameCZ = "GLX",
                            NameEN = "GLX",
                            SI = 65536,
                            SO = 65536
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.TypeOfSubsystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("NameCZ")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfSubsystem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Vstupní"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Výstupní"
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Logický"
                        },
                        new
                        {
                            Id = 4,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            NameCZ = "Komunikační"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<short>("Channels")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FailureBehaviorCZ")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FailureBehaviorEN")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("Logic")
                        .HasColumnType("bit");

                    b.Property<int>("MaxDCId")
                        .HasColumnType("int")
                        .HasColumnName("MaxDC_Id");

                    b.Property<int>("MaxMTTFdId")
                        .HasColumnType("int")
                        .HasColumnName("MaxMTTFd_Id");

                    b.Property<int>("MinDCId")
                        .HasColumnType("int")
                        .HasColumnName("MinDC_Id");

                    b.Property<int>("MinMTTFdId")
                        .HasColumnType("int")
                        .HasColumnName("MinMTTFd_Id");

                    b.Property<bool>("RelevantCCF")
                        .HasColumnType("bit");

                    b.Property<string>("RequirementsCZ")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RequirementsEN")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("MaxDCId");

                    b.HasIndex("MaxMTTFdId");

                    b.HasIndex("MinDCId");

                    b.HasIndex("MinMTTFdId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Channels = (short)1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Random text",
                            FailureBehaviorCZ = "Random text",
                            IdCreated = 0,
                            IsValid = true,
                            Label = "B",
                            Logic = true,
                            MaxDCId = 1,
                            MaxMTTFdId = 2,
                            MinDCId = 1,
                            MinMTTFdId = 1,
                            RelevantCCF = false,
                            RequirementsCZ = "Random text"
                        },
                        new
                        {
                            Id = 2,
                            Channels = (short)1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Random text",
                            FailureBehaviorCZ = "Random text",
                            IdCreated = 0,
                            IsValid = true,
                            Label = "1",
                            Logic = true,
                            MaxDCId = 1,
                            MaxMTTFdId = 3,
                            MinDCId = 1,
                            MinMTTFdId = 3,
                            RelevantCCF = false,
                            RequirementsCZ = "Random text"
                        },
                        new
                        {
                            Id = 3,
                            Channels = (short)1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Random text",
                            FailureBehaviorCZ = "Random text",
                            IdCreated = 0,
                            IsValid = true,
                            Label = "2",
                            Logic = true,
                            MaxDCId = 3,
                            MaxMTTFdId = 3,
                            MinDCId = 2,
                            MinMTTFdId = 1,
                            RelevantCCF = true,
                            RequirementsCZ = "Random text"
                        },
                        new
                        {
                            Id = 4,
                            Channels = (short)2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Random text",
                            FailureBehaviorCZ = "Random text",
                            IdCreated = 0,
                            IsValid = true,
                            Label = "3",
                            Logic = true,
                            MaxDCId = 3,
                            MaxMTTFdId = 3,
                            MinDCId = 2,
                            MinMTTFdId = 1,
                            RelevantCCF = true,
                            RequirementsCZ = "Random text"
                        },
                        new
                        {
                            Id = 5,
                            Channels = (short)2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Random text",
                            FailureBehaviorCZ = "Random text",
                            IdCreated = 0,
                            IsValid = true,
                            Label = "4",
                            Logic = true,
                            MaxDCId = 4,
                            MaxMTTFdId = 3,
                            MinDCId = 4,
                            MinMTTFdId = 3,
                            RelevantCCF = true,
                            RequirementsCZ = "Random text"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.F", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("F");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Řídká až málo častá",
                            IdCreated = 0,
                            IsValid = true,
                            Value = "F1"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Častá až nepřetržitá",
                            IdCreated = 0,
                            IsValid = true,
                            Value = "F2"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.MTTFd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<short>("Max")
                        .HasColumnType("smallint");

                    b.Property<short>("Min")
                        .HasColumnType("smallint");

                    b.Property<string>("ValueCZ")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ValueEN")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("MTTFd");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Max = (short)10,
                            Min = (short)3,
                            ValueCZ = "Krátká"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Max = (short)30,
                            Min = (short)10,
                            ValueCZ = "Střední"
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Max = (short)100,
                            Min = (short)30,
                            ValueCZ = "Dlouhá"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.P", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("P");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Možné za určitých podmínek",
                            IdCreated = 0,
                            IsValid = true,
                            Value = "P1"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Sotva možné",
                            IdCreated = 0,
                            IsValid = true,
                            Value = "P2"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.PerformanceLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("PL");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Label = "a"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Label = "b"
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Label = "c"
                        },
                        new
                        {
                            Id = 4,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Label = "d"
                        },
                        new
                        {
                            Id = 5,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            Label = "e"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.S", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("S");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Lehké",
                            IdCreated = 0,
                            IsValid = true,
                            Value = "S1"
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Závažné",
                            IdCreated = 0,
                            IsValid = true,
                            Value = "S2"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Architecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<short>("Channels")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Diagnostic")
                        .HasColumnType("bit");

                    b.Property<short>("HFT")
                        .HasColumnType("smallint");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("Logic")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPFHdId")
                        .HasColumnType("int")
                        .HasColumnName("MaxPFHd_Id");

                    b.Property<double>("MaxSFF")
                        .HasColumnType("float");

                    b.Property<double>("MinSFF")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MaxPFHdId");

                    b.ToTable("Architecture");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Channels = (short)1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnostic = false,
                            HFT = (short)0,
                            IdCreated = 0,
                            IsValid = true,
                            Label = "A",
                            Logic = true,
                            MaxPFHdId = 1,
                            MaxSFF = 99.0,
                            MinSFF = 60.0
                        },
                        new
                        {
                            Id = 2,
                            Channels = (short)2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnostic = false,
                            HFT = (short)1,
                            IdCreated = 0,
                            IsValid = true,
                            Label = "B",
                            Logic = true,
                            MaxPFHdId = 1,
                            MaxSFF = 99.0,
                            MinSFF = 0.0
                        },
                        new
                        {
                            Id = 3,
                            Channels = (short)1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnostic = true,
                            HFT = (short)0,
                            IdCreated = 0,
                            IsValid = true,
                            Label = "C",
                            Logic = true,
                            MaxPFHdId = 1,
                            MaxSFF = 99.0,
                            MinSFF = 60.0
                        },
                        new
                        {
                            Id = 4,
                            Channels = (short)2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnostic = true,
                            HFT = (short)1,
                            IdCreated = 0,
                            IsValid = true,
                            Label = "D",
                            Logic = true,
                            MaxPFHdId = 1,
                            MaxSFF = 99.0,
                            MinSFF = 0.0
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Av", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Av");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Nemožné",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)5
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Možné za určitých podmínek",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)3
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Pradvěpodobné",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)1
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.CFF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Beta")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<short>("MaxCCF")
                        .HasColumnType("smallint");

                    b.Property<short>("MinCCF")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("CFF");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Beta = 0.10000000000000001,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            MaxCCF = (short)35,
                            MinCCF = (short)0
                        },
                        new
                        {
                            Id = 2,
                            Beta = 0.050000000000000003,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            MaxCCF = (short)65,
                            MinCCF = (short)35
                        },
                        new
                        {
                            Id = 3,
                            Beta = 0.02,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            MaxCCF = (short)85,
                            MinCCF = (short)65
                        },
                        new
                        {
                            Id = 4,
                            Beta = 0.01,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            MaxCCF = (short)100,
                            MinCCF = (short)85
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Fr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrequencyOfThreatCZ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrequencyOfThreatEN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Fr");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FrequencyOfThreatCZ = "<= 1h",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)5
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FrequencyOfThreatCZ = "> 1h až <= 1 den",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)5
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FrequencyOfThreatCZ = "> 1 den až <= 2 týdny",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)4
                        },
                        new
                        {
                            Id = 4,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FrequencyOfThreatCZ = "> 2 týdny až <= 1 rok",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)3
                        },
                        new
                        {
                            Id = 5,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FrequencyOfThreatCZ = "> 1 rok",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)2
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.PFHd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<float>("MaxPFHd")
                        .HasColumnType("real");

                    b.Property<float>("MinPFHd")
                        .HasColumnType("real");

                    b.Property<short>("ValueSIL")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("PFHd");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            MaxPFHd = 1E-06f,
                            MinPFHd = 1E-07f,
                            ValueSIL = (short)3
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            MaxPFHd = 1E-05f,
                            MinPFHd = 1E-06f,
                            ValueSIL = (short)2
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreated = 0,
                            IsValid = true,
                            MaxPFHd = 0.0001f,
                            MinPFHd = 1E-05f,
                            ValueSIL = (short)1
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Pr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Pr");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Velmi vysoká",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)5
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Pravděpodobná",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)4
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Možná",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)3
                        },
                        new
                        {
                            Id = 4,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Výjimečná",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)2
                        },
                        new
                        {
                            Id = 5,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Zanedbatelná",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)1
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.SFF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ComponentNameCZ")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ComponentNameEN")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FailureModeCZ")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FailureModeEN")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SFF");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComponentNameCZ = "Relé",
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FailureModeCZ = "Kontakty nelze rozepnout",
                            IdCreated = 0,
                            IsValid = true,
                            Value = 10L
                        },
                        new
                        {
                            Id = 2,
                            ComponentNameCZ = "Relé",
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FailureModeCZ = "Kontakty nelze sepnout",
                            IdCreated = 0,
                            IsValid = true,
                            Value = 10L
                        },
                        new
                        {
                            Id = 3,
                            ComponentNameCZ = "Relé",
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FailureModeCZ = "Současný zkrat mezi třemi kontakty přepínacího spínače",
                            IdCreated = 0,
                            IsValid = true,
                            Value = 10L
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Se", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionCZ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Se");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Trvalé: smrt, ztráta oka nebo paže",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)4
                        },
                        new
                        {
                            Id = 2,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Trvalé: zlomená končetina, ztráta prstu",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)3
                        },
                        new
                        {
                            Id = 3,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Přechodné: vyžadující ošetření praktickým lékařem",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)2
                        },
                        new
                        {
                            Id = 4,
                            DateTimeCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DescriptionCZ = "Přechodné: vyžadující ošetření na první pomoci",
                            IdCreated = 0,
                            IsValid = true,
                            Value = (short)1
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.AccessPointSafetyFunction", b =>
                {
                    b.Property<int>("AccessPointId")
                        .HasColumnType("int")
                        .HasColumnName("AccessPoint_Id");

                    b.Property<int>("SafetyFunctionId")
                        .HasColumnType("int")
                        .HasColumnName("SafetyFunction_Id");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AccessPointId", "SafetyFunctionId");

                    b.HasIndex("SafetyFunctionId");

                    b.ToTable("AccessPointSafetyFunction");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.ElementSFF", b =>
                {
                    b.Property<int>("ElementId")
                        .HasColumnType("int")
                        .HasColumnName("Element_Id");

                    b.Property<int>("SFFId")
                        .HasColumnType("int")
                        .HasColumnName("SFF_Id");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ElementId", "SFFId");

                    b.HasIndex("SFFId");

                    b.ToTable("ElementSFF");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.MachineNorm", b =>
                {
                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("Machine_Id");

                    b.Property<int>("NormId")
                        .HasColumnType("int")
                        .HasColumnName("Norm_Id");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("MachineId", "NormId");

                    b.HasIndex("NormId");

                    b.ToTable("MachineNorm");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.SafetyFunctionSubsystem", b =>
                {
                    b.Property<int>("SafetyFunctionId")
                        .HasColumnType("int")
                        .HasColumnName("SafetyFunction_Id");

                    b.Property<int>("SubsystemId")
                        .HasColumnType("int")
                        .HasColumnName("Subsystem_Id");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("SafetyFunctionId", "SubsystemId");

                    b.HasIndex("SubsystemId");

                    b.ToTable("SafetyFunctionSubsystem");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.SubsystemCCF", b =>
                {
                    b.Property<int>("SubsystemId")
                        .HasColumnType("int")
                        .HasColumnName("Subsystem_Id");

                    b.Property<int>("CCFId")
                        .HasColumnType("int")
                        .HasColumnName("CCF_Id");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("SubsystemId", "CCFId");

                    b.HasIndex("CCFId");

                    b.ToTable("SubsystemCCF");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.AccessPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CurrentState_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("Machine_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentState_Id");

                    b.HasIndex("MachineId");

                    b.ToTable("AccessPoint");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double?>("B10d")
                        .HasColumnType("float");

                    b.Property<double?>("C")
                        .HasColumnType("float");

                    b.Property<string>("CatalogNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrentState_Id")
                        .HasColumnType("int");

                    b.Property<int>("DCId")
                        .HasColumnType("int")
                        .HasColumnName("DC_Id");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Dop")
                        .HasColumnType("float");

                    b.Property<double?>("Hop")
                        .HasColumnType("float");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<double?>("LambdaC")
                        .HasColumnType("float");

                    b.Property<double?>("MTTFdCounted")
                        .HasColumnType("float");

                    b.Property<int?>("MTTFdResultId")
                        .HasColumnType("int")
                        .HasColumnName("MTTFdResult_Id");

                    b.Property<double?>("Nop")
                        .HasColumnType("float");

                    b.Property<short>("OrderNum")
                        .HasColumnType("smallint");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int")
                        .HasColumnName("Producer_Id");

                    b.Property<int>("SubsystemId")
                        .HasColumnType("int")
                        .HasColumnName("Subsystem_Id");

                    b.Property<double?>("Tcycles")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrentState_Id");

                    b.HasIndex("DCId");

                    b.HasIndex("MTTFdResultId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("SubsystemId");

                    b.ToTable("Element");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool?>("CodeProtection")
                        .HasColumnType("bit");

                    b.Property<bool>("Communication")
                        .HasColumnType("bit");

                    b.Property<int?>("CurrentState_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("EvaluationMethodId")
                        .HasColumnType("int")
                        .HasColumnName("EvaluationMethod_Id");

                    b.Property<bool?>("HMI")
                        .HasColumnType("bit");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<bool?>("MachineHelp")
                        .HasColumnType("bit");

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MachineType_Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("PLC")
                        .HasColumnType("bit");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int")
                        .HasColumnName("Producer_Id");

                    b.Property<bool?>("SafetyMasterInPlace")
                        .HasColumnType("bit");

                    b.Property<bool?>("SecurityOfSafetyParts")
                        .HasColumnType("bit");

                    b.Property<int?>("TypeOfLogicId")
                        .HasColumnType("int")
                        .HasColumnName("TypeOfLogic_Id");

                    b.HasKey("Id");

                    b.HasIndex("CurrentState_Id");

                    b.HasIndex("EvaluationMethodId");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("TypeOfLogicId");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.SafetyFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AvId")
                        .HasColumnType("int")
                        .HasColumnName("Av_Id");

                    b.Property<int?>("CurrentState_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("EvaluationMethodId")
                        .HasColumnType("int")
                        .HasColumnName("EvaluationMethod_Id");

                    b.Property<int?>("FId")
                        .HasColumnType("int")
                        .HasColumnName("F_Id");

                    b.Property<int?>("FrId")
                        .HasColumnType("int")
                        .HasColumnName("Fr_Id");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PId")
                        .HasColumnType("int")
                        .HasColumnName("P_Id");

                    b.Property<int?>("PLrId")
                        .HasColumnType("int")
                        .HasColumnName("PLr_Id");

                    b.Property<int?>("PLresultId")
                        .HasColumnType("int")
                        .HasColumnName("PLresult_Id");

                    b.Property<int?>("PrId")
                        .HasColumnType("int")
                        .HasColumnName("Pr_Id");

                    b.Property<int?>("SILCLId")
                        .HasColumnType("int")
                        .HasColumnName("SILCL_Id");

                    b.Property<int?>("SILresultId")
                        .HasColumnType("int")
                        .HasColumnName("SILresult_Id");

                    b.Property<int?>("SId")
                        .HasColumnType("int")
                        .HasColumnName("S_Id");

                    b.Property<int?>("SeId")
                        .HasColumnType("int")
                        .HasColumnName("Se_Id");

                    b.Property<int>("TypeOfFunctionId")
                        .HasColumnType("int")
                        .HasColumnName("TypeOfFunction_Id");

                    b.HasKey("Id");

                    b.HasIndex("AvId");

                    b.HasIndex("CurrentState_Id");

                    b.HasIndex("EvaluationMethodId");

                    b.HasIndex("FId");

                    b.HasIndex("FrId");

                    b.HasIndex("PId");

                    b.HasIndex("PLrId");

                    b.HasIndex("PLresultId");

                    b.HasIndex("PrId");

                    b.HasIndex("SILCLId");

                    b.HasIndex("SILresultId");

                    b.HasIndex("SId");

                    b.HasIndex("SeId");

                    b.HasIndex("TypeOfFunctionId");

                    b.ToTable("SafetyFunction");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Subsystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ArchitectureId")
                        .HasColumnType("int")
                        .HasColumnName("Architecture_Id");

                    b.Property<int?>("CFFId")
                        .HasColumnType("int")
                        .HasColumnName("CFF_Id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<int?>("CurrentState_Id")
                        .HasColumnType("int");

                    b.Property<int?>("DCresultId")
                        .HasColumnType("int")
                        .HasColumnName("DCresult_Id");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("HFT")
                        .HasColumnType("float");

                    b.Property<int>("IdCreated")
                        .HasColumnType("int");

                    b.Property<int?>("IdUpdated")
                        .HasColumnType("int");

                    b.Property<int?>("MTTFdResultId")
                        .HasColumnType("int")
                        .HasColumnName("MTTFdResult_Id");

                    b.Property<int?>("PFHdResultId")
                        .HasColumnType("int")
                        .HasColumnName("PFHdResult_Id");

                    b.Property<int?>("PLresultId")
                        .HasColumnType("int")
                        .HasColumnName("PLresult_Id");

                    b.Property<short>("SFFresult")
                        .HasColumnType("smallint");

                    b.Property<double?>("T1")
                        .HasColumnType("float");

                    b.Property<double?>("T2")
                        .HasColumnType("float");

                    b.Property<int>("TypeOfSubsystemId")
                        .HasColumnType("int")
                        .HasColumnName("TypeOfSubsystem_Id");

                    b.Property<bool>("ValidCCF")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArchitectureId");

                    b.HasIndex("CFFId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrentState_Id");

                    b.HasIndex("DCresultId");

                    b.HasIndex("MTTFdResultId");

                    b.HasIndex("PFHdResultId");

                    b.HasIndex("PLresultId");

                    b.HasIndex("TypeOfSubsystemId");

                    b.ToTable("Subsystem");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.System.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SY_Entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AccessPoint"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Element"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Machine"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Producer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SafetyFunction"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Subsystem"
                        },
                        new
                        {
                            Id = 7,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.System.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DescriptionCZ")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DescriptionEN")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("Entity_Id");

                    b.Property<bool>("FinalState")
                        .HasColumnType("bit");

                    b.Property<bool>("InitialState")
                        .HasColumnType("bit");

                    b.Property<string>("NameCZ")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StateNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SY_State");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescriptionCZ = "Řídící jednotka není vybrána",
                            DescriptionEN = "Conrol logic is not selected",
                            EntityId = 3,
                            FinalState = false,
                            InitialState = true,
                            NameCZ = "Nová",
                            NameEN = "New",
                            StateNumber = 1,
                            Valid = true
                        },
                        new
                        {
                            Id = 2,
                            DescriptionCZ = "Pracuje se na detailech",
                            DescriptionEN = "Working on details",
                            EntityId = 3,
                            FinalState = false,
                            InitialState = false,
                            NameCZ = "Rozpracovaná",
                            NameEN = "Work in progres",
                            StateNumber = 2,
                            Valid = true
                        },
                        new
                        {
                            Id = 3,
                            DescriptionCZ = "Řídící jednotka byla vybrána",
                            DescriptionEN = "Control logic was selected",
                            EntityId = 3,
                            FinalState = false,
                            InitialState = false,
                            NameCZ = "Dokončená",
                            NameEN = "Completed",
                            StateNumber = 3,
                            Valid = true
                        },
                        new
                        {
                            Id = 4,
                            DescriptionCZ = "Mašina byla odstránená",
                            DescriptionEN = "Machine was deleted",
                            EntityId = 3,
                            FinalState = true,
                            InitialState = false,
                            NameCZ = "Odstránená",
                            NameEN = "Removed",
                            StateNumber = 4,
                            Valid = true
                        },
                        new
                        {
                            Id = 5,
                            DescriptionCZ = "Bez bezpečnostní funkce",
                            DescriptionEN = "Without safety function",
                            EntityId = 1,
                            FinalState = false,
                            InitialState = true,
                            NameCZ = "Nový",
                            NameEN = "New",
                            StateNumber = 1,
                            Valid = true
                        },
                        new
                        {
                            Id = 6,
                            DescriptionCZ = "Přístupový bod má jednu nebo více bezpečnostních funkcí",
                            DescriptionEN = "Access point has one or more safety functions",
                            EntityId = 1,
                            FinalState = false,
                            InitialState = false,
                            NameCZ = "Ošetřený bezpečnostní funkcí",
                            NameEN = "Protected with safety function",
                            StateNumber = 2,
                            Valid = true
                        },
                        new
                        {
                            Id = 7,
                            DescriptionCZ = "Přístupový bod byl odstránený",
                            DescriptionEN = "Access point was deleted",
                            EntityId = 1,
                            FinalState = true,
                            InitialState = false,
                            NameCZ = "Odstránený",
                            NameEN = "Removed",
                            StateNumber = 3,
                            Valid = true
                        });
                });

            modelBuilder.Entity("SSEA.DAL.Entities.System.StateTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CurrentStateId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentState_Id");

                    b.Property<int>("NextStateId")
                        .HasColumnType("int")
                        .HasColumnName("NextState_Id");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("NextStateId");

                    b.ToTable("SY_StateTransition");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.RoleClaim", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.User", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.System.State", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentState_Id");

                    b.Navigation("CurrentState");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.UserClaim", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.UserLogin", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.UserRole", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSEA.DAL.Entities.Auth.UserToken", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.TypeOfLogic", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Architecture", "MaxArchitecture")
                        .WithMany()
                        .HasForeignKey("MaxArchitectureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.Category", "MaxCategory")
                        .WithMany()
                        .HasForeignKey("MaxCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.PerformanceLevel", "MaxPL")
                        .WithMany()
                        .HasForeignKey("MaxPLId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.PFHd", "MaxSIL")
                        .WithMany()
                        .HasForeignKey("MaxSILId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaxArchitecture");

                    b.Navigation("MaxCategory");

                    b.Navigation("MaxPL");

                    b.Navigation("MaxSIL");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.Category", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.DC", "MaxDC")
                        .WithMany()
                        .HasForeignKey("MaxDCId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.MTTFd", "MaxMTTFd")
                        .WithMany()
                        .HasForeignKey("MaxMTTFdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.DC", "MinDC")
                        .WithMany()
                        .HasForeignKey("MinDCId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.MTTFd", "MinMTTFd")
                        .WithMany()
                        .HasForeignKey("MinMTTFdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaxDC");

                    b.Navigation("MaxMTTFd");

                    b.Navigation("MinDC");

                    b.Navigation("MinMTTFd");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Architecture", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.PFHd", "MaxPFHd")
                        .WithMany()
                        .HasForeignKey("MaxPFHdId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaxPFHd");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.AccessPointSafetyFunction", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.AccessPoint", "AccessPoint")
                        .WithMany("AccessPointSafetyFunctions")
                        .HasForeignKey("AccessPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.SafetyFunction", "SafetyFunction")
                        .WithMany("AccessPointSafetyFunctions")
                        .HasForeignKey("SafetyFunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessPoint");

                    b.Navigation("SafetyFunction");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.ElementSFF", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Element", "Element")
                        .WithMany("ElementSFFs")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.SFF", "SFF")
                        .WithMany("ElementSFFs")
                        .HasForeignKey("SFFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("SFF");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.MachineNorm", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Machine", "Machine")
                        .WithMany("MachineNorms")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.Norm", "Norm")
                        .WithMany("MachineNorms")
                        .HasForeignKey("NormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Norm");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.SafetyFunctionSubsystem", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.SafetyFunction", "SafetyFunction")
                        .WithMany("SafetyFunctionSubsystems")
                        .HasForeignKey("SafetyFunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Subsystem", "Subsystem")
                        .WithMany("SafetyFunctionSubsystems")
                        .HasForeignKey("SubsystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SafetyFunction");

                    b.Navigation("Subsystem");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.JoinEntities.SubsystemCCF", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.CCF", "CCF")
                        .WithMany("SubsystemCCFs")
                        .HasForeignKey("CCFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Subsystem", "Subsystem")
                        .WithMany("SubsystemCCFs")
                        .HasForeignKey("SubsystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CCF");

                    b.Navigation("Subsystem");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.AccessPoint", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.System.State", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentState_Id");

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Machine", "Machine")
                        .WithMany("AccessPoints")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentState");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Element", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.System.State", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentState_Id");

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.DC", "DC")
                        .WithMany()
                        .HasForeignKey("DCId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.MTTFd", "MTTFdResult")
                        .WithMany()
                        .HasForeignKey("MTTFdResultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Subsystem", "Subsystem")
                        .WithMany("Elements")
                        .HasForeignKey("SubsystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentState");

                    b.Navigation("DC");

                    b.Navigation("MTTFdResult");

                    b.Navigation("Producer");

                    b.Navigation("Subsystem");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Machine", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.System.State", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentState_Id");

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.EvaluationMethod", "EvaluationMethod")
                        .WithMany()
                        .HasForeignKey("EvaluationMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.MachineType", "MachineType")
                        .WithMany()
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.TypeOfLogic", "TypeOfLogic")
                        .WithMany()
                        .HasForeignKey("TypeOfLogicId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentState");

                    b.Navigation("EvaluationMethod");

                    b.Navigation("MachineType");

                    b.Navigation("Producer");

                    b.Navigation("TypeOfLogic");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.SafetyFunction", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Av", "Av")
                        .WithMany()
                        .HasForeignKey("AvId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.System.State", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentState_Id");

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.EvaluationMethod", "EvaluationMethod")
                        .WithMany()
                        .HasForeignKey("EvaluationMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.F", "F")
                        .WithMany()
                        .HasForeignKey("FId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Fr", "Fr")
                        .WithMany()
                        .HasForeignKey("FrId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.P", "P")
                        .WithMany()
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.PerformanceLevel", "PLr")
                        .WithMany()
                        .HasForeignKey("PLrId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.PerformanceLevel", "PLresult")
                        .WithMany()
                        .HasForeignKey("PLresultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Pr", "Pr")
                        .WithMany()
                        .HasForeignKey("PrId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.PFHd", "SILCL")
                        .WithMany()
                        .HasForeignKey("SILCLId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.PFHd", "SILresult")
                        .WithMany()
                        .HasForeignKey("SILresultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.S", "S")
                        .WithMany()
                        .HasForeignKey("SId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Se", "Se")
                        .WithMany()
                        .HasForeignKey("SeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.TypeOfFunction", "TypeOfFunction")
                        .WithMany()
                        .HasForeignKey("TypeOfFunctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Av");

                    b.Navigation("CurrentState");

                    b.Navigation("EvaluationMethod");

                    b.Navigation("F");

                    b.Navigation("Fr");

                    b.Navigation("P");

                    b.Navigation("PLr");

                    b.Navigation("PLresult");

                    b.Navigation("Pr");

                    b.Navigation("S");

                    b.Navigation("Se");

                    b.Navigation("SILCL");

                    b.Navigation("SILresult");

                    b.Navigation("TypeOfFunction");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Subsystem", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.Architecture", "Architecture")
                        .WithMany()
                        .HasForeignKey("ArchitectureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.CFF", "CFF")
                        .WithMany()
                        .HasForeignKey("CFFId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.System.State", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentState_Id");

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.DC", "DCresult")
                        .WithMany()
                        .HasForeignKey("DCresultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.MTTFd", "MTTFdResult")
                        .WithMany()
                        .HasForeignKey("MTTFdResultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.PFHd", "PFHdResult")
                        .WithMany()
                        .HasForeignKey("PFHdResultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.PL.PerformanceLevel", "PLresult")
                        .WithMany()
                        .HasForeignKey("PLresultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.TypeOfSubsystem", "TypeOfSubsystem")
                        .WithMany()
                        .HasForeignKey("TypeOfSubsystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Architecture");

                    b.Navigation("Category");

                    b.Navigation("CFF");

                    b.Navigation("CurrentState");

                    b.Navigation("DCresult");

                    b.Navigation("MTTFdResult");

                    b.Navigation("PFHdResult");

                    b.Navigation("PLresult");

                    b.Navigation("TypeOfSubsystem");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.System.State", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.System.Entity", "Entity")
                        .WithMany("States")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.System.StateTransition", b =>
                {
                    b.HasOne("SSEA.DAL.Entities.System.State", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSEA.DAL.Entities.System.State", "NextState")
                        .WithMany()
                        .HasForeignKey("NextStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentState");

                    b.Navigation("NextState");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.CCF", b =>
                {
                    b.Navigation("SubsystemCCFs");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.Common.Norm", b =>
                {
                    b.Navigation("MachineNorms");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.CodeListEntities.SIL.SFF", b =>
                {
                    b.Navigation("ElementSFFs");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.AccessPoint", b =>
                {
                    b.Navigation("AccessPointSafetyFunctions");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Element", b =>
                {
                    b.Navigation("ElementSFFs");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Machine", b =>
                {
                    b.Navigation("AccessPoints");

                    b.Navigation("MachineNorms");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.SafetyFunction", b =>
                {
                    b.Navigation("AccessPointSafetyFunctions");

                    b.Navigation("SafetyFunctionSubsystems");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.SafetyEvaluation.MainEntities.Subsystem", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("SafetyFunctionSubsystems");

                    b.Navigation("SubsystemCCFs");
                });

            modelBuilder.Entity("SSEA.DAL.Entities.System.Entity", b =>
                {
                    b.Navigation("States");
                });
#pragma warning restore 612, 618
        }
    }
}
