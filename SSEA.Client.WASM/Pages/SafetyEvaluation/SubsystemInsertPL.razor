@page "/safetyEvaluation/subsystemInsert/PL"

@layout MainLayout

@attribute [Authorize(Roles = "SafetyEvaluationAdmin, NormalUser")]

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 10px;">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Create new subsystem</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton @onclick="@BackToSafetyFunction" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Disabled="@(safetyFunctionId == 0 || disabled)" />
                <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" form="formId" Disabled="@(disabled || tabs.ActivePanelIndex != 0)" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs @ref="tabs" ActivePanelIndexChanged="@(() => StateHasChanged())" Outlined="true" Rounded="true" Centered="true" ApplyEffectsToContainer="true" Color="@Color.Default">

                <MudTabPanel Text="Subsystem details">
                    <EditForm Model="@subsystem" OnValidSubmit="OnValidSubmit" id="formId">
                        <DataAnnotationsValidator />
                        <MudGrid Style="padding: 20px;">
                            <MudItem xs="12">
                                <MudSelect @bind-Value="subsystem.TypeOfSubsystem" T="TypeOfSubsystemModel" ReadOnly="@typeSelected" Label="Type of subsystem *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@typeOfSubsystemToString">
                                    @foreach (var item in typeOfSubsystems)
                                    {
                                        <MudSelectItem T="TypeOfSubsystemModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect @bind-Value="subsystem.OperationPrinciple" T="OperationPrincipleModel" Label="Operation principle *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@operationPrincipleToString">
                                    @foreach (var item in operationPrinciples)
                                    {
                                        <MudSelectItem T="OperationPrincipleModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect @bind-Value="subsystem.Category" T="CategoryModel" Label="Category *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@categoryToString">
                                    @foreach (var item in categories)
                                    {
                                        <MudSelectItem T="CategoryModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="subsystem.Description" T="string" Label="Subsystem description" Variant="Variant.Outlined" Lines="3" />
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>

                <MudTabPanel Text="CCF" Disabled="@(subsystem.Category.Label == string.Empty || subsystem.Category.Label is null)">
                    <MudGrid Style="padding: 20px;">
                        @if (subsystem.Category.RelevantCCF == true)
                        {
                            <MudItem xs="12">
                                <MudTable T="CCFModel" MultiSelection="true" @bind-SelectedItems="@subsystem.SelectedCCFs" Items="@CCFs" Dense="true" Hover="true" Outlined="true">
                                    <ColGroup>
                                        <col style="width:5%;" /> Checkbox
                                        <col style="width:15%;" /> Type
                                        <col style="width:75%;" /> Description
                                        <col style="width:5%;" /> Points
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh>Type</MudTh>
                                        <MudTh>Description</MudTh>
                                        <MudTh>Points</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="tableContext">
                                        <MudTd DataLabel="Name">@tableContext.Type</MudTd>
                                        <MudTd DataLabel="Name">@tableContext.Description</MudTd>
                                        <MudTd DataLabel="Name" Style="padding-left: 27px;">@tableContext.Points</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudText Align="Align.Center" Style="margin: 50px;" Typo="Typo.h6">
                                    CCF is not relevant for this category of subsystem
                                </MudText>
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Elements" Disabled="@(subsystem.Category.Label == string.Empty || subsystem.Category.Label is null)">
                    <MudGrid Style="padding: 20px;">
                        @if (subsystem.Category.Channels == 1)
                        {
                            <MudItem xs="3" />
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6" Align="Align.Center">1. Element</MudText>
                                <ElementPL Model="element1" MTTFds="MTTFds" Producers="producers" DCs="DCs" ReadOnly="false"/>
                            </MudItem>
                            <MudItem xs="3" />
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudText Align="Align.Center">
                                    <MudCheckBox @bind-Checked="equalElements" Color="Color.Primary" Style="padding: 0px;">Both elements are the same</MudCheckBox>
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6" Align="Align.Center">1. Element</MudText>
                                <ElementPL Model="element1" MTTFds="MTTFds" Producers="producers" DCs="DCs" ReadOnly="false"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6" Align="Align.Center">2. Element</MudText>
                                <ElementPL Model="@(equalElements == true ? element1 : element2)" MTTFds="MTTFds" Producers="producers" DCs="DCs" ReadOnly="false"/>
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
            @if (showMessage)
            {
                <MudAlert Severity="@messageType" Style="margin-top: 20px;">@message</MudAlert>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    // safetyFunctionId == 0
    // -- creating independed subsystem
    // -- after saving navigate to SubsystemDetailPL
    // safetyFunctionId != 0
    // -- creating subsystem within safety function
    // -- after saving navigate to SafetyFunctionDetailPL
    // -- after saving create record in SafetyFunctionSubsystem join table

    [Inject]
    private SubsystemFacade subsystemFacade { get; set; }

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    private Func<CategoryModel, string> categoryToString = cat => cat.Label;
    private Func<OperationPrincipleModel, string> operationPrincipleToString = op => op.Name;
    private Func<TypeOfSubsystemModel, string> typeOfSubsystemToString = tos => tos.Name;

    private SubsystemDetailModelPL subsystem = new();

    private ElementDetailModelPL element1 = new();
    private ElementDetailModelPL element2 = new();

    private ICollection<ProducerModel> producers = new List<ProducerModel>();
    private ICollection<DCModel> DCs = new List<DCModel>();
    private ICollection<MTTFdModel> MTTFds = new List<MTTFdModel>();
    private ICollection<TypeOfSubsystemModel> typeOfSubsystems = new List<TypeOfSubsystemModel>();
    private ICollection<CategoryModel> categories = new List<CategoryModel>();
    private ICollection<CCFModel> CCFs = new List<CCFModel>();
    private ICollection<OperationPrincipleModel> operationPrinciples = new List<OperationPrincipleModel>();

    private int machineId;
    private int accessPointId;
    private int safetyFunctionId;

    private bool equalElements = true;
    private bool disabled = false;
    private bool typeSelected = false;
    private bool showMessage = false;
    private string message = string.Empty;
    private Severity messageType = Severity.Success;
    private MudTabs tabs = new MudTabs();

    protected override async Task OnInitializedAsync()
    {
        typeOfSubsystems = await codeListFacade.GetAllTypeOfSubsystemsAsync();
        producers = await codeListFacade.GetAllProducersAsync();
        MTTFds = await codeListFacade.GetAllMTTFdsAsync();
        DCs = await codeListFacade.GetAllDCsAsync();
        categories = await codeListFacade.GetAllCategoriesAsync();
        CCFs = await codeListFacade.GetAllCCFsAsync();
        operationPrinciples = await codeListFacade.GetAllOperationPrinciplesAsync();

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("typeOfSubsystem", out var _typeOfSubsystem))
        {
            subsystem.TypeOfSubsystem = (_typeOfSubsystem.ToString().ToLower()) switch
            {
                "input" => typeOfSubsystems.FirstOrDefault(t => t.Id == 1),
                "output" => typeOfSubsystems.FirstOrDefault(t => t.Id == 2),
                "communication" => typeOfSubsystems.FirstOrDefault(t => t.Id == 4),
                _ => typeOfSubsystems.FirstOrDefault(t => t.Id == 3),
            };
            typeSelected = true;
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("machineId", out var _machineId))
            machineId = Convert.ToInt32(_machineId);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("accessPointId", out var _accessPointId))
            accessPointId = Convert.ToInt32(_accessPointId);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("safetyFunctionId", out var _safetyFunctionId))
            safetyFunctionId = Convert.ToInt32(_safetyFunctionId);

        StateHasChanged();
    }

    private void BackToSafetyFunction()
    {
        navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionDetail/PL/{machineId}/{accessPointId}/{safetyFunctionId}");
    }

    private async Task OnValidSubmit()
    {
        disabled = true;

        subsystem.Elements = new List<ElementDetailModelPL>();
        subsystem.Elements.Add(element1);
        if (subsystem.Category.Channels == 2 && equalElements)
            subsystem.Elements.Add(element1);
        if (subsystem.Category.Channels == 2 && equalElements == false)
            subsystem.Elements.Add(element2);

        SubsystemCreationResponseModel response;
        response = await subsystemFacade.CreateAsync(subsystem, safetyFunctionId);

        if (response.IsSuccess)
        {
            messageType = Severity.Success;
            message = response.Message;
            showMessage = true;
            StateHasChanged();
            await Task.Delay(2000);

            // Creating subsystem within safety function -> navigate to safety function detail
            if (safetyFunctionId != 0)
                BackToSafetyFunction();

            // Creating independed subsystem -> navigate to subsystem detail
            else
                navigationManager.NavigateTo($"/safetyEvaluation/subsystemDetail/PL/{0}/{0}/{0}/{response.SubsystemId}");
        }
        else
        {
            messageType = Severity.Error;
            message = response.Message;
            showMessage = true;
            disabled = false;
            StateHasChanged();
        }
    }

}