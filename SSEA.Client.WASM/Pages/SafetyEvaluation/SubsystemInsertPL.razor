@page "/safetyEvaluation/subsystemInsert/PL"

@layout MainLayout

@attribute [Authorize(Roles = "Administrator, NormalUser")]

<MudContainer MaxWidth="MaxWidth.Large" Style="padding-top: 10px;">
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Create new subsystem</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton @onclick="@BackToSafetyFunction" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Disabled="@(safetyFunctionId == 0 || disabled)" />
                <MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.Save" Color="Color.Primary" form="formId" Disabled="disabled" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs Outlined="true" Rounded="true" Centered="true" ApplyEffectsToContainer="true" Color="@Color.Default">

                <MudTabPanel Text="Subsystem details">
                    <EditForm Model="@subsystem" OnValidSubmit="OnValidSubmit" id="formId">
                        <DataAnnotationsValidator />
                        <MudGrid Style="padding: 20px;">
                            <MudItem xs="12">
                                <MudField Label="Type of subsystem *" ReadOnly="true" Variant="Variant.Outlined">@typeOfSubsytem</MudField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect @bind-Value="subsystem.OperationPrinciple" T="OperationPrincipleModel" Label="Operation principle *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@operationPrincipleToString">
                                    @foreach (var item in operationPrinciples)
                                    {
                                        <MudSelectItem T="OperationPrincipleModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect @bind-Value="subsystem.Category" T="CategoryModel" Label="Category *" Variant="Variant.Outlined" Format="F2" ToStringFunc="@categoryToString">
                                    @foreach (var item in categories)
                                    {
                                        <MudSelectItem T="CategoryModel" Value="@(item)" />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <hr />
                            </MudItem>
                            <MudItem xs="3">
                                <MudField Label="PL result" ReadOnly="true" Variant="Variant.Outlined">@subsystem.PLresult</MudField>
                            </MudItem>
                            <MudItem xs="3">
                                <MudField Label="CCF valid" ReadOnly="true" Variant="Variant.Outlined">@subsystem.ValidCCF</MudField>
                            </MudItem>
                            <MudItem xs="3">
                                <MudField Label="MTTFd result" ReadOnly="true" Variant="Variant.Outlined">@subsystem.MttFdResult</MudField>
                            </MudItem>
                            <MudItem xs="3">
                                <MudField Label="DC result" ReadOnly="true" Variant="Variant.Outlined">@subsystem.DCresult</MudField>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudTabPanel>

                <MudTabPanel Text="CCF">
                    <MudGrid Style="padding: 20px;">
                        <MudItem xs="12">
                            <MudTable T="CCFModel" MultiSelection="true" @bind-SelectedItems="@subsystem.SelectedCCFs" Items="@CCFs" Dense="true" Hover="true" FixedHeader="true" Outlined="true">
                                <ColGroup>
                                    <col style="width:5%;" /> Checkbox
                                    <col style="width:15%;" /> Type
                                    <col style="width:75%;" /> Description
                                    <col style="width:5%;" /> Points
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Type</MudTh>
                                    <MudTh>Description</MudTh>
                                    <MudTh>Points</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="tableContext">
                                    <MudTd DataLabel="Name">@tableContext.Type</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.Description</MudTd>
                                    <MudTd DataLabel="Name">@tableContext.Points</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Elements">
                    <MudGrid Style="padding: 20px;">
                        @if (subsystem.Category.Channels == 1)
                        {
                            <MudItem xs="3" />
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6" Align="Align.Center">1. Element</MudText>
                                <ElementPL Model="element1" MTTFds="MTTFds" Producers="producers" DCs="DCs" />
                            </MudItem>
                            <MudItem xs="3" />
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudText Align="Align.Center">
                                    <MudCheckBox @bind-Checked="equalElements" Color="Color.Primary" Style="padding: 0px;">Both elements are the same</MudCheckBox>
                                </MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6" Align="Align.Center">1. Element</MudText>
                                <ElementPL Model="element1" MTTFds="MTTFds" Producers="producers" DCs="DCs" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6" Align="Align.Center">2. Element</MudText>
                                <ElementPL Model="@(equalElements == true ? element1 : element2)" MTTFds="MTTFds" Producers="producers" DCs="DCs" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>

            </MudTabs>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {

    [Inject]
    private CodeListFacade codeListFacade { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    private Func<CategoryModel, string> categoryToString = cat => cat.Label;
    private Func<OperationPrincipleModel, string> operationPrincipleToString = op => op.Name;

    private bool equalElements = true;
    private bool disabled = false;

    private SubsystemDetailModelPL subsystem = new();

    private ElementDetailModelPL element1 = new();
    private ElementDetailModelPL element2 = new();

    private ICollection<ProducerModel> producers = new List<ProducerModel>();
    private ICollection<DCModel> DCs = new List<DCModel>();
    private ICollection<MTTFdModel> MTTFds = new List<MTTFdModel>();
    private ICollection<TypeOfSubsystemModel> typeOfSubsystems = new List<TypeOfSubsystemModel>();
    private ICollection<CategoryModel> categories = new List<CategoryModel>();
    private ICollection<CCFModel> CCFs = new List<CCFModel>();
    private ICollection<OperationPrincipleModel> operationPrinciples = new List<OperationPrincipleModel>();

    private string typeOfSubsytem;
    private int machineId;
    private int accessPointId;
    private int safetyFunctionId;

    protected override async Task OnInitializedAsync()
    {
        typeOfSubsystems = await codeListFacade.GetAllTypeOfSubsystemsAsync();
        producers = await codeListFacade.GetAllProducersAsync();
        MTTFds = await codeListFacade.GetAllMTTFdsAsync();
        DCs = await codeListFacade.GetAllDCsAsync();
        categories = await codeListFacade.GetAllCategoriesAsync();
        CCFs = await codeListFacade.GetAllCCFsAsync();
        operationPrinciples = await codeListFacade.GetAllOperationPrinciplesAsync();

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("typeOfSubsystem", out var _typeOfSubsystem))
            typeOfSubsytem = _typeOfSubsystem;
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("machineId", out var _machineId))
            machineId = Convert.ToInt32(_machineId);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("accessPointId", out var _accessPointId))
            accessPointId = Convert.ToInt32(_accessPointId);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("safetyFunctionId", out var _safetyFunctionId))
            safetyFunctionId = Convert.ToInt32(_safetyFunctionId);

        Console.WriteLine(typeOfSubsytem);
        Console.WriteLine(machineId);
        Console.WriteLine(accessPointId);
        Console.WriteLine(safetyFunctionId);
    }

    private void BackToSafetyFunction()
    {
        navigationManager.NavigateTo($"/safetyEvaluation/safetyFunctionDetail/PL/{machineId}/{accessPointId}/{safetyFunctionId}");
    }





    private void OnValidSubmit()
    {

    }

}